/*
* This code is automatically generated by the schemaGenerator.js
* Please avoid to modify it manually, instead use the gulp task
* stored in AskiaScriptEditor project
*/
CodeMirror.xsdSchemas = CodeMirror.xsdSchemas || {};
CodeMirror.xsdSchemas["http://www.askia.com/ADCUnitTestSchema"] = {
  schema : {
    "root": "fixture",
    "tags": [
        {
            "name": "fixture",
            "children": [
                "arrange"
            ],
            "desc": "A fixture is a partial definition of test.\r\n        It's used to create a default context for tests which implements it.\r\n        For the unit tests, it could be call by using the fixture attribute and the name of the file which contains the fixture.\r\n        For example:\r\n          &lt;units fixture=\"MyFixtureFile.xml\"&gt;[tests]&lt;/units&gt;\r\n          This mean that by default all units tests will run under the context specified in the fixture file."
        },
        {
            "name": "tests",
            "children": [
                "units"
            ],
            "desc": "Root node to manage all tests (units and integrations)"
        },
        {
            "name": "units",
            "children": [
                "test"
            ],
            "desc": "Contains all unit test cases.",
            "attrs": [
                {
                    "name": "fixture",
                    "desc": "Fixture file to use for all tests"
                }
            ]
        },
        {
            "name": "output",
            "children": [],
            "desc": "Simulate the selection of a given output.",
            "attrs": [
                {
                    "name": "id",
                    "desc": "Id of the output to use"
                }
            ]
        },
        {
            "name": "Survey",
            "children": [],
            "desc": "Survey context to simulate",
            "attrs": [
                {
                    "name": "Name",
                    "desc": "Name of the survey"
                },
                {
                    "name": "CurrentQuestion",
                    "desc": "Indicates the shortcut of the current question associated with the ADC."
                }
            ]
        },
        {
            "name": "properties",
            "children": [
                "property"
            ],
            "desc": "List all properties to emulate"
        },
        {
            "name": "property",
            "children": [
                "value"
            ],
            "desc": "Property to emulate",
            "attrs": [
                {
                    "name": "id",
                    "desc": "Id of the propeprty to access"
                }
            ]
        },
        {
            "name": "value",
            "children": [],
            "desc": "Value of the property to set"
        },
        {
            "name": "browser",
            "children": [
                "resolution",
                "support",
                "pluginVersion"
            ],
            "desc": "Create a fake for the browser.\r\n        It allows to predefined the return value of the browser methods and properties.",
            "attrs": [
                {
                    "name": "name",
                    "desc": "Name of the browser.\r\n            \"Chrome\", \"Explorer\", \"Mozilla\", \"Safari\", \"Opera\" ..."
                },
                {
                    "name": "version",
                    "desc": "Version of the browser."
                },
                {
                    "name": "os",
                    "desc": "Name of the Operating System.\r\n            \"Windows\", \"Mac\", \"iPhone/iPod\", \"Linux\""
                },
                {
                    "name": "userAgent",
                    "desc": "Define the user-agent identity."
                },
                {
                    "name": "mobile",
                    "desc": "Indicates if the browser run under a mobile device"
                }
            ]
        },
        {
            "name": "resolution",
            "children": [],
            "desc": "Indicates the resolution of the browser",
            "attrs": [
                {
                    "name": "screenAvailWidth",
                    "desc": "Indicates the available width of the screen"
                },
                {
                    "name": "screenAvailHeight",
                    "desc": "Indicates the available height of the screen"
                },
                {
                    "name": "screenWidth",
                    "desc": "Indicates the width of the screen"
                },
                {
                    "name": "screenHeight",
                    "desc": "Indicates the height of the screen"
                },
                {
                    "name": "screenColorDepth",
                    "desc": "Indicates the color-depth of the screen"
                },
                {
                    "name": "windowWidth",
                    "desc": "Indicates the width of the window"
                },
                {
                    "name": "windowHeight",
                    "desc": "Indicates the height of the window"
                }
            ]
        },
        {
            "name": "support",
            "children": [],
            "desc": "Indicates the return value of the Support method of the Browser object.\r\n                Also see: Browser.Support() method in AskiaScript 2.0",
            "attrs": [
                {
                    "name": "name",
                    "desc": "Name of the features to set.\r\n                    Like \"flash\", \"javascript\", \"json\", \"video\" ...\r\n                    See the documentation of the AskiaScript 2.0 for more details."
                },
                {
                    "name": "value",
                    "desc": "Indicates the value to return for that feature."
                }
            ]
        },
        {
            "name": "pluginVersion",
            "children": [],
            "desc": "Indicates the return value of the PluginVersion method of the Browser object.\r\n                Also see: Browser.PluginVersion() method in AskiaScript 2.0",
            "attrs": [
                {
                    "name": "name",
                    "desc": "Name of the plugin to set.\r\n                    Like \"flash\", \"quicktime\", \"vlc\", \"silverlight\" ...\r\n                    See the documentation of the AskiaScript 2.0 for more details."
                },
                {
                    "name": "value",
                    "desc": "Indicates the version of the plugin to return."
                }
            ]
        },
        {
            "name": "test",
            "children": [
                "arrange",
                "fake_output",
                "asserts"
            ],
            "desc": "Unit test case.\r\n        List arrange and asserts of unit test.",
            "attrs": [
                {
                    "name": "id",
                    "desc": "Unique identifier of the test case"
                },
                {
                    "name": "description",
                    "desc": "Describe the aim of the test case."
                },
                {
                    "name": "fixture",
                    "desc": "Fixture file to use for the current test"
                }
            ]
        },
        {
            "name": "arrange",
            "children": []
        },
        {
            "name": "fake_output",
            "children": [
                "head",
                "placeholder",
                "foot"
            ],
            "desc": "Fake the output to validate the test",
            "attrs": [
                {
                    "name": "id",
                    "desc": "Fake the Id of the output"
                },
                {
                    "name": "errorCode",
                    "desc": "Fake the error code"
                }
            ]
        },
        {
            "name": "head",
            "children": [],
            "desc": "Fake the output of the head section"
        },
        {
            "name": "placeholder",
            "children": [],
            "desc": "Fake the output of the placeholder section"
        },
        {
            "name": "foot",
            "children": [],
            "desc": "Fake the output of the foot section"
        },
        {
            "name": "asserts",
            "children": [
                "assert_output",
                "assert_not_output",
                "assert_error",
                "assert_not_error",
                "assert_empty",
                "assert_not_empty",
                "assert_match",
                "assert_not_match",
                "head",
                "placeholder",
                "foot"
            ],
            "desc": "List of assertions to test against the output generated by the Askia Rendering Engine (ARE)"
        },
        {
            "name": "assert_output",
            "children": [],
            "desc": "Assert the selected output by the ARE is the one specified by the attribute \"id\"",
            "attrs": [
                {
                    "name": "id",
                    "desc": "Indicates the identifier of the output that should be selected."
                }
            ]
        },
        {
            "name": "assert_not_output",
            "children": [],
            "desc": "Assert the selected output by the ARE is not the one specified by the attribute \"id\"",
            "attrs": [
                {
                    "name": "id",
                    "desc": "Indicates the identifier of the output that should not be selected."
                }
            ]
        },
        {
            "name": "assert_error",
            "children": [],
            "desc": "Assert that the ARE return an error",
            "attrs": [
                {
                    "name": "code",
                    "desc": "Indicates the error message return by the ARE engine"
                }
            ]
        },
        {
            "name": "assert_not_error",
            "children": [],
            "desc": "Assert that the ARE doesn't return any errors"
        },
        {
            "name": "head",
            "children": []
        },
        {
            "name": "placeholder",
            "children": []
        },
        {
            "name": "foot",
            "children": []
        },
        {
            "name": "select_nodes",
            "children": [
                "assert_count",
                "assert_exist",
                "assert_not_exist",
                "assert_empty",
                "assert_not_empty",
                "assert_contains",
                "assert_not_contains",
                "assert_equals",
                "assert_not_equals",
                "assert_match",
                "assert_not_match",
                "assert_has_attr",
                "assert_has_not_attr"
            ],
            "desc": "Select nodes in the HTML fragment using xPath query.",
            "attrs": [
                {
                    "name": "xPath",
                    "desc": "XPath to query HTML nodes"
                }
            ]
        },
        {
            "name": "assert_exist",
            "children": [],
            "desc": "Assert the existence of the selected nodes"
        },
        {
            "name": "assert_not_exist",
            "children": [],
            "desc": "Assert the non-existence of the selected nodes"
        },
        {
            "name": "assert_count",
            "children": [],
            "desc": "Assert the count of the selected nodes",
            "attrs": [
                {
                    "name": "is",
                    "desc": "Indicate the type of the comparison.",
                    "values": [
                        {
                            "name": "equal",
                            "desc": "Verify if the number of selected nodes is equal than the specify value."
                        },
                        {
                            "name": "different",
                            "desc": "Verify if the number of selected nodes is difference than the specify value."
                        },
                        {
                            "name": "lowerThan",
                            "desc": "Verify if the number of selected nodes is lower than the specify value."
                        },
                        {
                            "name": "lowerOrEqualThan",
                            "desc": "Verify if the number of selected nodes is lower or equal than the specify value."
                        },
                        {
                            "name": "greatherThan",
                            "desc": "Verify if the number of selected nodes is greather than the specify value."
                        },
                        {
                            "name": "greatherOrEqualThan",
                            "desc": "Verify if the number of selected nodes is greather or equal than the specify value."
                        }
                    ]
                },
                {
                    "name": "value",
                    "desc": "Value to test against the type of comparison"
                }
            ]
        },
        {
            "name": "assert_has_attr",
            "children": [],
            "desc": "Assert that the specified attribute exist"
        },
        {
            "name": "assert_has_not_attr",
            "children": [],
            "desc": "Assert that the specified attribute not exist"
        },
        {
            "name": "assert_empty",
            "children": [],
            "desc": "Assert that the section or the html nodes are empty"
        },
        {
            "name": "assert_not_empty",
            "children": [],
            "desc": "Assert that the section or the html nodes are not empty"
        },
        {
            "name": "assert_contains",
            "children": [],
            "desc": "Assert that the section or the html nodes contains the specified value"
        },
        {
            "name": "assert_not_contains",
            "children": [],
            "desc": "Assert that the section or the html nodes doesn't contains the specified value"
        },
        {
            "name": "assert_equals",
            "children": [],
            "desc": "Assert that the section is equals to specified value"
        },
        {
            "name": "assert_not_equals",
            "children": [],
            "desc": "Assert that the section is not equals to the specified value"
        },
        {
            "name": "assert_match",
            "children": [],
            "desc": "Assert that the specified section match the specified regular expression pattern"
        },
        {
            "name": "assert_not_match",
            "children": [],
            "desc": "Assert that the specified section don't match the specified regular expression  pattern"
        },
        {
            "name": "attr",
            "children": [],
            "desc": "Specify the attribute name/value of the tag",
            "attrs": [
                {
                    "name": "name",
                    "desc": "Name of the attribute"
                },
                {
                    "name": "value",
                    "desc": "Validate that the attribute is equal to the specify value"
                },
                {
                    "name": "value_contains",
                    "desc": "Validate that the attribute contains the specify value"
                }
            ]
        },
        {
            "name": "assert_tag_exist",
            "children": [],
            "desc": "Assert the existence of the specified tag / attributes"
        },
        {
            "name": "assert_tag_not_exist",
            "children": [],
            "desc": "Assert the non existence of the specified tag / attributes"
        }
    ]
},
  hintSchemaInfo : {
    "!top": [
        "fixture"
    ],
    "fixture": {
        "children": [
            "arrange"
        ]
    },
    "tests": {
        "children": [
            "units"
        ]
    },
    "units": {
        "children": [
            "test"
        ],
        "attrs": {
            "fixture": null
        }
    },
    "output": {
        "children": [],
        "attrs": {
            "id": null
        }
    },
    "Survey": {
        "children": [],
        "attrs": {
            "Name": null,
            "CurrentQuestion": null
        }
    },
    "properties": {
        "children": [
            "property"
        ]
    },
    "property": {
        "children": [
            "value"
        ],
        "attrs": {
            "id": null
        }
    },
    "value": {
        "children": []
    },
    "browser": {
        "children": [
            "resolution",
            "support",
            "pluginVersion"
        ],
        "attrs": {
            "name": null,
            "version": null,
            "os": null,
            "userAgent": null,
            "mobile": null
        }
    },
    "resolution": {
        "children": [],
        "attrs": {
            "screenAvailWidth": null,
            "screenAvailHeight": null,
            "screenWidth": null,
            "screenHeight": null,
            "screenColorDepth": null,
            "windowWidth": null,
            "windowHeight": null
        }
    },
    "support": {
        "children": [],
        "attrs": {
            "name": null,
            "value": null
        }
    },
    "pluginVersion": {
        "children": [],
        "attrs": {
            "name": null,
            "value": null
        }
    },
    "test": {
        "children": [
            "arrange",
            "fake_output",
            "asserts"
        ],
        "attrs": {
            "id": null,
            "description": null,
            "fixture": null
        }
    },
    "arrange": {
        "children": []
    },
    "fake_output": {
        "children": [
            "head",
            "placeholder",
            "foot"
        ],
        "attrs": {
            "id": null,
            "errorCode": null
        }
    },
    "head": {
        "children": []
    },
    "placeholder": {
        "children": []
    },
    "foot": {
        "children": []
    },
    "asserts": {
        "children": [
            "assert_output",
            "assert_not_output",
            "assert_error",
            "assert_not_error",
            "assert_empty",
            "assert_not_empty",
            "assert_match",
            "assert_not_match",
            "head",
            "placeholder",
            "foot"
        ]
    },
    "assert_output": {
        "children": [],
        "attrs": {
            "id": null
        }
    },
    "assert_not_output": {
        "children": [],
        "attrs": {
            "id": null
        }
    },
    "assert_error": {
        "children": [],
        "attrs": {
            "code": null
        }
    },
    "assert_not_error": {
        "children": []
    },
    "select_nodes": {
        "children": [
            "assert_count",
            "assert_exist",
            "assert_not_exist",
            "assert_empty",
            "assert_not_empty",
            "assert_contains",
            "assert_not_contains",
            "assert_equals",
            "assert_not_equals",
            "assert_match",
            "assert_not_match",
            "assert_has_attr",
            "assert_has_not_attr"
        ],
        "attrs": {
            "xPath": null
        }
    },
    "assert_exist": {
        "children": []
    },
    "assert_not_exist": {
        "children": []
    },
    "assert_count": {
        "children": [],
        "attrs": {
            "is": [
                "equal",
                "different",
                "lowerThan",
                "lowerOrEqualThan",
                "greatherThan",
                "greatherOrEqualThan"
            ],
            "value": null
        }
    },
    "assert_has_attr": {
        "children": []
    },
    "assert_has_not_attr": {
        "children": []
    },
    "assert_empty": {
        "children": []
    },
    "assert_not_empty": {
        "children": []
    },
    "assert_contains": {
        "children": []
    },
    "assert_not_contains": {
        "children": []
    },
    "assert_equals": {
        "children": []
    },
    "assert_not_equals": {
        "children": []
    },
    "assert_match": {
        "children": []
    },
    "assert_not_match": {
        "children": []
    },
    "attr": {
        "children": [],
        "attrs": {
            "name": null,
            "value": null,
            "value_contains": null
        }
    },
    "assert_tag_exist": {
        "children": []
    },
    "assert_tag_not_exist": {
        "children": []
    }
}
};