{%
'Theme
Dim WhiteColor = Theme.WhiteColor
Dim BlackColor = Theme.BlackColor
Dim PrimaryColor = CurrentADP.Var("ribbon_footer_background_color")
Dim PrimaryDarkColor = Theme.PrimaryDarkColor
Dim PrimaryLightColor = Theme.PrimaryLightColor
Dim SecondaryColor = Theme.SecondaryColor
Dim SecondaryDarkColor = Theme.SecondaryDarkColor
Dim FontFamily = Theme.FontFamily
Dim BaseFS = Theme.BaseFS
Dim LargeFS = Theme.LargeFS
Dim NormalFS = Theme.NormalFS
Dim SmallFS = Theme.SmallFS
Dim NeutralColor = Theme.NeutralColor
Dim NeutralDarkColor = Theme.NeutralDarkColor
Dim NeutralLightColor = Theme.NeutralLightColor
Dim ErrorColor = Theme.ErrorColor
Dim BorderWidth = Theme.BorderWidth
Dim BorderRadius = Theme.BorderRadius
Dim VPadding = Theme.VPadding
Dim HPadding = Theme.HPadding
Dim LineHeight = Theme.LineHeight
Dim buttons_alignment = CurrentADP.Var("buttons_alignment")
Dim radio_checkbox_size = CurrentADP.Var("radio_checkbox_size")

Dim modalWidth = CurrentADP.Var("modal_width")
Dim modalHeight = CurrentADP.Var("modal_height")
Dim closeType = CurrentADP.Var("modal_close_type")

%}

::selection {
    color: rgba({%= NeutralLightColor %});
    background-color: rgba({%= PrimaryColor %});
}
::-moz-selection {
    color: rgba({%= NeutralLightColor %});
    background-color: rgba({%= PrimaryColor %});
}
body, html {
    font-family: {%= FontFamily %};
    font-size: {%= BaseFS %};
}
::-webkit-input-placeholder {
    font-family: {%= FontFamily %};
}
::-moz-placeholder {
    font-family: {%= FontFamily %};
}
:-ms-input-placeholder {
    font-family: {%= FontFamily %};
}
:-moz-placeholder {
    font-family: {%= FontFamily %};
}
input, textarea, keygen, select, button {
    font-family: {%= FontFamily %};
}
svg .logotext {
    fill: rgba({%= PrimaryColor %});
}
svg .logobar {
    fill: rgba({%= SecondaryColor %});
}
header h2 {
    font-family: {%= FontFamily %};
    font-size: {%= LargeFS %};
    padding: 0 0 0 {%= HPadding %};
}
@media screen and (max-width: 500px) {
  header h2 {
    padding: 0 0 0 0.2em;
  }
}
body, html {
    color: rgba({%= BlackColor %});
}

body, header.large, .askiaquestions {
    background-color: rgba({%= WhiteColor %});
}
body {
    line-height: {%= LineHeight %};
}

.ribbon, footer {
    background-color: rgba({%= PrimaryColor %});
}
{% If CurrentADP.Var("display_next") = "no" Then %}
input[name="Next"] {
    display: none;
}
{% EndIf %}
{% If CurrentADP.Var("display_footer") = "no" Then %}
footer {
    display: none;
}
{% EndIf %}
header.large, .askiaquestions, input[type=text], input[type=number], textarea {
    color: rgba({%= BlackColor %});
    background-color: rgba({%= WhiteColor %});
}

header.fixed {
    box-shadow: 0 4px 5px 0 rgba({%= BlackColor.ToRGB() %}, .14);
}

header.fixed .progressWrapper {
    margin: auto {%= HPadding %} auto auto;
}

.progressWrapper {
    margin: auto {%= HPadding %} auto auto;

}
@media screen and (max-width: 500px) {
  .progressWrapper {
      margin: auto 0.5em auto auto;
  }
}

@media screen and (max-width: 500px) {
  header.fixed .progressWrapper {
    margin: auto 0.5em auto auto;
  }
}

.progress {
    background-color: rgba({%= BlackColor.ToRGB() %}, 0.1);
    border-radius: {%= BorderRadius %};
}

.progress-bar {
    background-color: rgba({%= SecondaryColor %});
    border-radius: {%= BorderRadius %} 0 0 {%= BorderRadius %};
    width: {%= (Interview.Progress * (14/100)).ToString().Replace(",",".") %}em;
}
.progress-value {
    font-size: {%= SmallFS %};
}

@media screen and (min-width: 501px) and (max-width: 768px) {
  .progress-bar {
    width: {%= (Interview.Progress * (11/100)).ToString().Replace(",",".") %}em;
  }
}
@media screen and (max-width: 500px) {
  .progress-bar {
    width: {%= (Interview.Progress * (6/100)).ToString().Replace(",",".") %}em;
  }
}
.askiaquestions {
    border-radius: {%= BorderRadius %};
    padding: {%= VPadding %} {%= HPadding %};
    margin: 0 auto 5em auto;
    box-shadow: 0 4px 5px 0 rgba({%= BlackColor.ToRGB() %}, .14), 0 1px 10px 0 rgba({%= BlackColor.ToRGB() %}, .12), 0 2px 4px -1px rgba({%= BlackColor.ToRGB() %}, .2);
}

.askia-question-label {
    font-size: {%= NormalFS %};
    padding: {%= VPadding %} 0;
}
.askia-control .askia-question-label {
    font-size: {%= NormalFS %};
    padding: 0;
}
.askia-grid-row:nth-child(even) td {
    background-color: rgba({%= NeutralLightColor.ToRGB() %},1.0);
}
.askia-grid-row td, .askia-grid-header td {
    border-bottom: {%= BorderWidth %} solid rgba({%= NeutralDarkColor.ToRGB() %},1.0);
}
{% If (Browser.Mobile = False) Then %}
.askia-grid-row:hover td {
    background-color: rgba({%= BlackColor.ToRGB() %},.1);
}
{% EndIf %}

.askia-grid-row .askia-question-label {
    font-size: {%= NormalFS %};
    padding-left: 0.5em;
    width: 45%;
}

.askia-radio, .askia-checkbox {
   float: left;
}

.askia-grid-row > td >.askia-radio, .askia-grid-row > td > .askia-checkbox, .askiarow > td >.askia-radio, .askiarow > td > .askia-checkbox {
  float: none;
}

.askia-radio + .askia-response-label, .askia-checkbox + .askia-response-label {
    display: block;
    margin-left: {%= radio_checkbox_size %} !important;
    padding-left: 10px;
    vertical-align: text-top;
}

.instruction {
    color: rgba({%= NeutralDarkColor %});
    font-family: {%= FontFamily %};
}

.askia-errors-summary {
    background: rgba({%= ErrorColor %});
    border: {%= BorderWidth %} solid rgba({%= ErrorColor %});
    border-radius: {%= BorderRadius %};
    color: #FFF;
    padding: {%= VPadding %} {%= HPadding %};
}

.askia-caption {
    font-size: {%= NormalFS %};
}
.askia-response {
    font-size: {%= NormalFS %};
    padding: 5px;
    cursor: pointer;
}
{% If (Browser.Mobile = False) Then %}
.askia-response:hover {
    background-color : rgba({%= BlackColor.ToRGB() %}, .1);
    cursor: pointer;
}
{% EndIf %}
.askia-grid-header .askia-response:hover {
    background-color : transparent;
}
.btn {
    font-family: {%= FontFamily %};
    font-size: {%= NormalFS %};
    border-radius: {%= BorderRadius %};
    padding: {%= VPadding %};
    box-shadow: 0 2px 5px rgba({%= BlackColor.ToRGB() %}, 0.3);
}
.btn:after {
    box-shadow: inset 0 0 0 5em rgba({%= WhiteColor.ToRGB() %}, 0.5);
}
.btn:hover {
    box-shadow: 0 2px 8px rgba({%= BlackColor.ToRGB() %}, 0.6);
}
input[type=checkbox]:checked~label.askia-response-label, input[type=radio]:checked~label.askia-response-label {
    color: rgba({%= SecondaryColor %});
}
input[type=radio] + label.askia-radio,
input[type=checkbox] + label.askia-checkbox {
    width: {%= radio_checkbox_size %};
    height: {%= radio_checkbox_size %};
    border: {%= BorderWidth %} solid rgba({%= NeutralDarkColor %});
    box-shadow: inset 0 0 0 0 rgba({%= SecondaryColor %});
}
input[type=checkbox]:checked + label.askia-checkbox,
input[type=radio]:checked + label.askia-radio {
    background: rgba({%= SecondaryColor %});
    border-color: rgba({%= SecondaryColor %});
    box-shadow: inset 0 0 0 .5em rgba({%= SecondaryColor %});
    transition: transform .3s cubic-bezier(.2, .3, 0, 1), box-shadow .3s cubic-bezier(.2, .3, 0, 1), border-color 0s;
}
input[type=checkbox] + label.askia-checkbox:before,
input[type=checkbox] + label.askia-checkbox:after,
input[type=radio] + label.askia-radio:before,
input[type=radio] + label.askia-radio:after {
    top: -{%= BorderWidth %};
    left: -{%= BorderWidth %};
    font-size: {%= radio_checkbox_size %};
}

input[type=text],
input[type=number],
textarea,
input[type=color],
input[type=date],
input[type=datetime],
input[type=email],
input[type=month],
input[type=password],
input[type=range],
input[type=search],
input[type=tel],
input[type=time],
input[type=url],
input[type=week] {
    font-size: {%= NormalFS %};
    border: {%= BorderWidth %} solid rgba({%= NeutralColor %});
    padding: 0.5em 0.5em;
}
input[type=text]:focus,
input[type=number]:focus,
textarea:focus,
input[type=color]:focus,
input[type=date]:focus,
input[type=datetime]:focus,
input[type=email]:focus,
input[type=month]:focus,
input[type=password]:focus,
input[type=range]:focus,
input[type=search]:focus,
input[type=tel]:focus,
input[type=time]:focus,
input[type=url]:focus,
input[type=week]:focus {
    border: {%= BorderWidth %} solid rgba({%= SecondaryColor %});
}
input[type=text]:hover,
input[type=number]:hover,
textarea:hover,
input[type=color]:hover,
input[type=date]:hover,
input[type=datetime]:hover,
input[type=email]:hover,
input[type=month]:hover,
input[type=password]:hover,
input[type=range]:hover,
input[type=search]:hover,
input[type=tel]:hover,
input[type=time]:hover,
input[type=url]:hover,
input[type=week]:hover {
    border: {%= BorderWidth %} solid rgba({%= NeutralDarkColor %});
}

.navigation {
    text-align: {%= buttons_alignment %};
    padding-top: {%= VPadding %};
}

.primary {
    background-color: rgba({%= SecondaryColor %});
    color: rgba({%= WhiteColor %});
}

.primary:hover {
    background-color: rgba({%= SecondaryDarkColor %});
    color: rgba({%= WhiteColor %});
}

.secondary {
    background-color: rgba({%= NeutralLightColor %});
    color: rgba({%= NeutralDarkColor %});
}

.secondary:hover {
    background-color: rgba({%= NeutralColor %});
    color: rgba({%= PrimaryDarkColor %});
}
.secondary.disabled:hover {
    box-shadow: 0 2px 5px rgba({%= BlackColor.ToRGB() %}, 0.3);
}
.footerLeft {
    padding: 0 0 0 {%= HPadding %};
    color: rgba({%= NeutralLightColor %});
    font-size: {%= SmallFS %};
}

.footerRight {
    padding: 0 {%= HPadding %} 0 0;
    color: rgba({%= NeutralLightColor %});
    font-size: {%= SmallFS %};
}
footer a {
    color: {%= NeutralLightColor.ToHexa() %};
    transition: color linear .3s;
}

.loader-main {
  margin-top: 10px;
  width: calc({%= modalWidth %} - 20px);
  {% If closeType = 1 Then %}
    height: calc({%= modalHeight %} - 40px);
  {% Else %}
    height: 100%;
  {% EndIf %}
}

@keyframes spin-cycle {
  from {
    fill: #DF4335;
    -webkit-transform: scale(1);
    transform: scale(1);
  }

  to {
    fill: rgba(255, 255, 255, 0);
    -webkit-transform: scale(1);
    transform: scale(1);
  }
}

/* The Modal (background) */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 10%; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    margin-bottom: 0;
    padding-bottom: 0;
}

/* Modal Content */
.modal-content {
    width: {%= modalWidth %};
    height: {%= modalHeight %};
    position: relative;
    background-color: #fefefe;
    font-weight: bold;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s
}

/* Modal loding */
.modal-loading {
  width: 100%;
  height: {%= modalHeight %};
  position: relative;
  background-color: #fefefe;
  font-weight: bold;
  margin: auto;
  padding: 0;
  border: 1px solid #888;
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
  -webkit-animation-name: animatetop;
  -webkit-animation-duration: 0.4s;
  animation-name: animatetop;
  animation-duration: 0.4s;
}

/* Add Animation */
@-webkit-keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

@keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

{% If closeType = 1 Then %}
.close-div{
  height: 31px;
  width: 100%;
  background-color: rgba({%= SecondaryColor %});
  transition: all .3s cubic-bezier(0.25, 0.1, 0.25, 0.1);

}
.close-div:hover{
  background-color: rgba({%= SecondaryDarkColor %});
  transition: all .3s cubic-bezier(0.25, 0.1, 0.25, 0.1);
}
{% EndIf %}

.close_button{
  transition: all .3s cubic-bezier(0.25, 0.1, 0.25, 0.1);
  background-color: Transparent;
  background-repeat:no-repeat;
  border: none;
  cursor:pointer;
  overflow: hidden;
  outline:none;
  margin-top: 5px;
  color:white;
  font-size: {%= NormalFS %}
}
