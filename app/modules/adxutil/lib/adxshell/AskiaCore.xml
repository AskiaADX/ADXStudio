<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AskiaCore</name>
    </assembly>
    <members>
        <member name="T:AskiaCore.ContextFactory">
            <summary>
                Factory to create a <see cref="T:AskiaCore.IContext"/> to access/edit survey 
            </summary>
        </member>
        <member name="M:AskiaCore.ContextFactory.Create">
            <summary>
            Create a new instance of <see cref="T:AskiaCore.IContext"/>
            </summary>
            <returns>A new context instance</returns>
        </member>
        <member name="T:AskiaCore.ICategory">
            
             \brief %Category interface
            
        </member>
        <member name="P:AskiaCore.ICategory.Name">
            
             \brief Name of the category
            
        </member>
        <member name="T:AskiaCore.ICategoryCollection">
            
             \brief %Category collection
            
        </member>
        <member name="P:AskiaCore.ICategoryCollection.Count">
            
             \brief Number of categories in the collection
            
        </member>
        <member name="P:AskiaCore.ICategoryCollection.Item(System.String)">
            
             \brief Find a category by name
            
        </member>
        <member name="M:AskiaCore.ICategoryCollection.Create(System.String)">
            
             \brief Create a category given its name
            
        </member>
        <member name="M:AskiaCore.ICategoryCollection.Remove(System.Int32)">
            
             \brief Remove a category from the collection given its id
            
        </member>
        <member name="M:AskiaCore.ICategoryCollection.Remove(System.String)">
            
             \brief Remove a category from the collection given its name
            
        </member>
        <member name="T:AskiaCore.ICategoryIterator">
            
             \brief %Category iterator
            
        </member>
        <member name="T:AskiaCore.ICategoryRefCollection">
            
             \brief %Category collection
            
        </member>
        <member name="P:AskiaCore.ICategoryRefCollection.Count">
            
             \brief Number of categories in the collection
            
        </member>
        <member name="P:AskiaCore.ICategoryRefCollection.Item(System.Int32)">
            
             \brief Find a category by id
            
        </member>
        <member name="P:AskiaCore.ICategoryRefCollection.Item(System.String)">
            
             \brief Find a category by name
            
        </member>
        <member name="M:AskiaCore.ICategoryRefCollection.Add(System.Int32)">
            
             \brief Add a category given its id
            
        </member>
        <member name="M:AskiaCore.ICategoryRefCollection.Add(System.String)">
            
             \brief Add a category given its name
            
        </member>
        <member name="M:AskiaCore.ICategoryRefCollection.Remove(System.Int32)">
            
             \brief Remove a category from the collection given its id
            
        </member>
        <member name="M:AskiaCore.ICategoryRefCollection.Remove(System.String)">
            
             \brief Remove a category from the collection given its name
            
        </member>
        <member name="T:AskiaCore.IContext">
             <summary>
                 Provide a context for requests execution, it's required for many API requests.<br/>
                 The context is created and its members values are filled by the software using AskiaCore,
                 most of them help identify an entity by providing an id.
             </summary>
             <example>
                 <para>Create a new survey with one question</para>
                 <code>
                     using AskiaCore;
             
                     namespace MyApp
                     {
                         public class MyProgram
                         {
                             static void Main()
                             {
                                 // Initialize the database connection string (Where the survey will be stored)
                                 Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
            
                                 // Create a new context
                                 IContext context = ContextFactory.Create();
                                 context.UserId = 1;
                                 context.SessionId = "xxxxx-xxxxx-xxxxx-xxxxxx";
                                 context.LanguageId = 2057; // Edit the survey with this language (English)
                               
                                 // Create a new survey
                                 ISurvey survey = SurveyFactory.Create(context);
                                 survey.Name = "MySurvey";
                                 survey.SetDefaultLanguageId(2057); // English
                               
                                 // Create the single closed question gender
                                 IQuestion gender = survey.Questions.Create();
                                 gender.Shortcut = "gender";
                                 gender.MainCaption ="What's your gender?";
                                 gender.Type = QuestionType.Single;
                               
                                 // Create responses
                                 IResponse man = gender.Responses.Create();
                                 man.MainCaption = "Man";
                                 IResponse woman = gender.Responses.Create();
                                 woman.MainCaption = "Woman";
                         
                                 // Save all changes
                                 survey.SaveAll();
                         
                                 // Release the database connection
                                 Persistent.EndDatabaseConnection();
                             }
                         }
                     }
                 </code>
             </example>
        </member>
        <member name="P:AskiaCore.IContext.UserId">
            <summary>
            Id of the user making the request.
            </summary>
        </member>
        <member name="P:AskiaCore.IContext.SessionId">
            <summary>
            Arbitrary session id in which the request is made.
            This session id should be the same for all requests made by a client session.
            </summary>
            <remarks>It's important to give the same session id for a better management of the undo/redo, logs etc...</remarks>
        </member>
        <member name="P:AskiaCore.IContext.LanguageId">
            <summary>
            Id of the current survey language.
            </summary>
        </member>
        <member name="T:AskiaCore.IControlRender">
            <summary>
            Represents the result of the control rendering
            </summary>
        </member>
        <member name="P:AskiaCore.IControlRender.OutputId">
            <summary>
            Id of the output that has been used
            </summary>
        </member>
        <member name="P:AskiaCore.IControlRender.Header">
            <summary>
            Header part of the rendered control
            </summary>
        </member>
        <member name="P:AskiaCore.IControlRender.Placeholder">
            <summary>
            Placeholder part of the rendered control
            </summary>
        </member>
        <member name="P:AskiaCore.IControlRender.Footer">
            <summary>
            Footer part of the rendered control
            </summary>
        </member>
        <member name="P:AskiaCore.IControlRender.IsRendered">
            <summary>
            Indicates if the control has been successfully rendered
            </summary>
        </member>
        <member name="P:AskiaCore.IControlRender.Errors">
            <summary>
            Returns the collection of possible errors
            </summary>
        </member>
        <member name="T:AskiaCore.IControl">
            <summary>
            Control interface
            </summary>
        </member>
        <member name="P:AskiaCore.IControl.Name">
            <summary>
            Name of the control
            </summary>
        </member>
        <member name="P:AskiaCore.IControl.Config">
            <summary>
            Configuration of the control
            </summary>
            <remarks>
            This the content of the <i>config.xml</i> file inside the control
            </remarks>
        </member>
        <member name="P:AskiaCore.IControl.Data">
            <summary>
            Data contained within the file
            </summary>
        </member>
        <member name="M:AskiaCore.IControl.LoadFromDirectory(System.String)">
            <summary>
            Loads the control from a directory
            </summary>
            <param name="directory">Directory from which the control will be loaded</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IControl.LoadFromFileAndExtract(System.String,System.String)">
            <summary>
            Loads the control from a file and extract its content to a directory
            </summary>
            <param name="srcPath">Path of the file from which the control will be loaded</param>
            <param name="dstDirectory">Directory where the control will be extracted</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IControl.LoadFromMemoryAndExtract(System.String)">
            <summary>
            Loads the control from memory and extracts its content to a directory
            </summary>
            <param name="directory">Directory where the control will be extracted</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IControl.RenderForQuestion(AskiaCore.ISurvey,AskiaCore.IInterview,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Renders the control for a given question of a given survey interview
            </summary>
            <param name="survey">Survey for which the control will be rendered</param>
            <param name="interview">Interview for which the control will be rendered</param>
            <param name="question">Question for which the control will be rendered</param>
            <param name="ouptutId">Id of the output to render for the control</param>
            <param name="properties">Collection of properties used to render the control</param>
            <returns>Return the rendered control</returns>
        </member>
        <member name="T:AskiaCore.IControlCollection">
            <summary>
            Control collection
            </summary>
        </member>
        <member name="P:AskiaCore.IControlCollection.Count">
            <summary>
            Number of controls in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IControlCollection.Item(System.String)">
            <summary>
            Find a control by name
            </summary>
            <param name="name">Name of the control to find</param>
        </member>
        <member name="M:AskiaCore.IControlCollection.Create(System.String)">
            <summary>
            Creates a new control in the collection given its name
            </summary>
            <param name="name">Name of the control to create</param>
            <returns>Returns the newly created control</returns>
        </member>
        <member name="M:AskiaCore.IControlCollection.Remove(System.Int32)">
            <summary>
            Remove a control from the collection given its id
            </summary>
            <param name="id">Id of the control to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IControlCollection.Remove(System.String)">
            <summary>
            Remove a control from the collection given its name
            </summary>
            <param name="name">Name of the control to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IControlIterator">
            <summary>
            Control collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.IControlCreationResult">
            <summary>
            Represents the result of methods that creates a control
            </summary>
        </member>
        <member name="P:AskiaCore.IControlCreationResult.Control">
            <summary>
            Newly created control in case of success
            </summary>
        </member>
        <member name="T:AskiaCore.ControlsFactory">
            <summary>
            Controls factory
            </summary>
        </member>
        <member name="M:AskiaCore.ControlsFactory.GetControlsMap(AskiaCore.IContext)">
            <summary>
            Retrieves all the available controls
            </summary>
            <param name="ctx">Context used by the control</param>
            <returns>Returns a dictionary of all controls mapped by their id</returns>
        </member>
        <member name="M:AskiaCore.ControlsFactory.Create(AskiaCore.IContext)">
            <summary>
            Creates a new control
            </summary>
            <param name="ctx">Context used by the control</param>
            <returns>Returns the newly created control</returns>
        </member>
        <member name="M:AskiaCore.ControlsFactory.Get(AskiaCore.IContext,System.Int32)">
            <summary>
            Retrieves a control given its id
            </summary>
            <param name="context">Context used by the control</param>
            <param name="id">Id of the control to retrieve</param>
            <returns>Returns the found control</returns>
        </member>
        <member name="M:AskiaCore.ControlsFactory.CreateFromDirectory(AskiaCore.IContext,System.String)">
            <summary>
            Creates a control from a directory
            </summary>
            <param name="ctx">Context used by the control</param>
            <param name="directory">Directory from which the control will be created</param>
            <returns>Returns the newly created control</returns>
        </member>
        <member name="M:AskiaCore.ControlsFactory.CreateFromFileAndExtract(AskiaCore.IContext,System.String,System.String)">
            <summary>
            Creates a control from a file and extract its content to a directory
            </summary>
            <param name="ctx">Context used by the control</param>
            <param name="srcPath">Path of the file from which the control will be created</param>
            <param name="dstDirectory">Directory where the control will be extracted</param>
            <returns>Returns the newly created control</returns>
        </member>
        <member name="M:AskiaCore.ControlsFactory.CreateFromFileAndExtract(AskiaCore.IContext,System.Collections.Generic.ICollection{System.Byte},System.String)">
            <summary>
            Creates a control from a file and extract its content to a directory
            </summary>
            <param name="ctx">Context used by the control</param>
            <param name="fileData">File data from which the control will be created</param>
            <param name="dstDirectory">Directory where the control will be extracted</param>
            <returns>Returns the newly created control</returns>
        </member>
        <member name="T:AskiaCore.IMergeableResponse">
            <summary>
            Mergeable response interface
            </summary>
        </member>
        <member name="P:AskiaCore.IMergeableResponse.MainCaption">
            <summary>
            Main caption of the response
            </summary>
        </member>
        <member name="P:AskiaCore.IMergeableResponse.ResourcePath">
            <summary>
            Path of the resource associated to the response
            </summary>
        </member>
        <member name="T:AskiaCore.IMergeableResponseCollection">
            <summary>
            Mergeable response collection
            </summary>
        </member>
        <member name="P:AskiaCore.IMergeableResponseCollection.Count">
            <summary>
            Number of mergeable responses in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IMergeableResponseCollection.Item(System.String)">
            <summary>
            Find a mergeable response by its main caption
            </summary>
            <param name="mainCaption">Main caption of the mergeable response to find</param>
        </member>
        <member name="M:AskiaCore.IMergeableResponseCollection.Create(System.String)">
            <summary>
            Creates a new mergeable response in the collection given its main caption
            </summary>
            <param name="mainCaption">Main caption of the mergeable response to create</param>
            <returns>Returns the newly created mergeable response</returns>
        </member>
        <member name="M:AskiaCore.IMergeableResponseCollection.Remove(System.String)">
            <summary>
            Remove a mergeable response from the collection given its main caption
            </summary>
            <param name="mainCaption">Main caption of the mergeable response to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IMergeableResponseIterator">
            <summary>
            Mergeable response collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.DynamicSettingType">
            <summary>
            Enumeration of the Dynamic Settings Types
            </summary>
        </member>
        <member name="F:AskiaCore.DynamicSettingType.Text">
            <summary>
            Text replacement
            </summary>
        </member>
        <member name="F:AskiaCore.DynamicSettingType.Responses">
            <summary>
            Response list
            </summary>
        </member>
        <member name="F:AskiaCore.DynamicSettingType.Resource">
            <summary>
            Resources insertion
            </summary>
        </member>
        <member name="T:AskiaCore.IDynamicSetting">
            <summary>
            Dynamic setting interface
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.Type">
            <summary>
            Type of the setting
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.Name">
            <summary>
            Name of the setting
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.DisplayName">
            <summary>
            Name of the setting to display
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.Description">
            <summary>
            Description of the setting
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.Options">
            <summary>
            Possible options for the setting
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.DefinedValues">
            <summary>
            Defined values for the setting
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.Value">
            <summary>
            Dynamic Value of the setting
            </summary>
        </member>
        <member name="P:AskiaCore.IDynamicSetting.Responses">
            <summary>
            Dynamic responses for the setting
            </summary>
        </member>
        <member name="T:AskiaCore.IMergeableSurvey">
            <summary>
            Mergeable survey interface
            </summary>
        </member>
        <member name="P:AskiaCore.IMergeableSurvey.DynamicSettings">
            <summary>
            Dynamic Settings of the survey
            </summary>
        </member>
        <member name="T:AskiaCore.ElementType">
            <summary>
            Enumeration of the element type
            </summary>
        </member>
        <member name="F:AskiaCore.ElementType.Page">
            <summary>
            Element representing a displayed page
            </summary>
        </member>
        <member name="F:AskiaCore.ElementType.Container">
            <summary>
            Generic element used to structure others
            </summary>
        </member>
        <member name="F:AskiaCore.ElementType.Question">
            <summary>
            Element representing a question
            </summary>
        </member>
        <member name="F:AskiaCore.ElementType.Caption">
            <summary>
            Element containing a text caption
            </summary>
        </member>
        <member name="F:AskiaCore.ElementType.Control">
            <summary>
            Element representing a control
            </summary>
        </member>
        <member name="F:AskiaCore.ElementType.MergingPage">
            <summary>
            Element used to merge multiple pages
            </summary>
        </member>
        <member name="T:AskiaCore.IElement">
            <summary>
            Element interface
            </summary>
        </member>
        <member name="M:AskiaCore.IElement.IsReachable">
            <summary>
            Defines if the element is reachable
            </summary>
            <remarks>
            A element is reachable if it is not deleted and if its parent is also <b>reachable</b>,
            this means all of the element ancestors are checked
            </remarks>
            <returns>Returns a boolean indicating if the element is reachable</returns>
        </member>
        <member name="P:AskiaCore.IElement.QuestionId">
            <summary>
            Id of the question related to the element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.ParentId">
            <summary>
            Id of the parent element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.Parent">
            <summary>
            Parent element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.Position">
            <summary>
            Position of the element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.Type">
            <summary>
            Type of the element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.ExtensionId">
            <summary>
            Id of the extension (control or page template) related to the element
            </summary>
        </member>
        <member name="M:AskiaCore.IElement.SetExtension(System.Int32)">
            <summary>
            Set the id of extension depending on the type of the element (Control or Page Template)
            </summary>
            <param name="id">Id of the control or page template</param>
            <returns>Return the result of the operation</returns>
        </member>
        <member name="M:AskiaCore.IElement.ApplySurveyDefaultControlProperties">
            <summary>
            Retrieves the corresponding default control properties
            defined in the survey settings and apply them to the element
            </summary>
        </member>
        <member name="M:AskiaCore.IElement.GetSurveyDefaultControlId">
            <summary>
            Get the id of the corresponding default control defined in the survey settings
            </summary>
            <returns>Return the id of the control or -1 if not found</returns>
        </member>
        <member name="P:AskiaCore.IElement.ExtensionProperties">
            <summary>
            Extension properties collection for the element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.ThemeProperties">
            <summary>
            Theme properties collection for the element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.BeforeStart">
            <summary>
            HTML code to inject before the element start
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.AfterStart">
            <summary>
            HTML code to inject after the element start
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.BeforeEnd">
            <summary>
            HTML code to inject before the element end
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.AfterEnd">
            <summary>
            HTML code to inject after the element end
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.Classes">
            <summary>
            Classes to add to the element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.Attributes">
            <summary>
            HTML attributes to add to the element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.Style">
            <summary>
            Style to add to the element
            </summary>
        </member>
        <member name="M:AskiaCore.IElement.GetLanguageCaption(System.Int32)">
            <summary>
            Gets the caption text for a given language
            </summary>
            <param name="languageId">Id of the language used to retrieve the caption</param>
            <returns>Returns the caption in the requested language</returns>
        </member>
        <member name="M:AskiaCore.IElement.SetLanguageCaption(System.Int32,System.String)">
            <summary>
            Sets the caption text for a given language
            </summary>
            <param name="languageId">Id of the language used to set the caption</param>
            <param name="caption">Value of the caption to set</param>
        </member>
        <member name="P:AskiaCore.IElement.Children">
            <summary>
            Children elements collection for the element
            </summary>
        </member>
        <member name="M:AskiaCore.IElement.RenderPage(AskiaCore.IInterview,System.String,System.String)">
            <summary>
            Render the corresponding page for the specified interview
            </summary>
            <param name="interview">Interview for which the page will be rendered</param>
            <param name="outputId">Id of the output used for the rendering</param>
            <param name="formTag">Tag used for the form element during the rendering</param>
            <returns>Returns the rendered page</returns>
        </member>
        <member name="M:AskiaCore.IElement.RenderControl(AskiaCore.IInterview,System.String)">
            <summary>
            Render the corresponding control for the specified interview
            </summary>
            <param name="interview">Interview for which the control will be rendered</param>
            <param name="outputId">Id of the output used for the rendering</param>
            <returns>Returns the rendered control</returns>
        </member>
        <member name="P:AskiaCore.IElement.PrevSibling">
            <summary>
            Previous sibling element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.PrevSiblingId">
            <summary>
            Previous sibling Id
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.NextSibling">
            <summary>
            Next sibling element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.NextSiblingId">
            <summary>
            Next sibling Id
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.FirstChild">
            <summary>
            First child element
            </summary>
        </member>
        <member name="P:AskiaCore.IElement.LastChild">
            <summary>
            Last child element
            </summary>
        </member>
        <member name="T:AskiaCore.IElementCollection">
            <summary>
            Element collection
            </summary>
        </member>
        <member name="P:AskiaCore.IElementCollection.Count">
            <summary>
            Number of elements in the collection
            </summary>
        </member>
        <member name="M:AskiaCore.IElementCollection.GetById(System.Int32)">
            <summary>
            Get an element with the given id
            </summary>
            <param name="id">Id of the element to retrieve</param>
            <returns>Returns the requested element</returns>
        </member>
        <member name="M:AskiaCore.IElementCollection.GetByType(AskiaCore.ElementType)">
            <summary>
            Get the first element with the given type
            </summary>
            <remarks>
            Retrieves the first found element of the requested type
            </remarks>
            <param name="type">Type of the element to retrieve</param>
            <returns>Returns the requested element</returns>
        </member>
        <member name="M:AskiaCore.IElementCollection.Create(System.Int32)">
            <summary>
            Creates a new child element at a given position
            </summary>
            <param name="position">Position at which the child element should be created</param>
            <returns>Returns the newly created element</returns>
        </member>
        <member name="M:AskiaCore.IElementCollection.Remove(System.Int32)">
            <summary>
            Remove an element from the collection given its id
            </summary>
            <param name="id">Id of the element to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IElementIterator">
            <summary>
            Element collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.ErrorType">
            <summary>
                Enumeration of error type
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.Unknown">
            <summary>
                Unknown error
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.NoQuestionnaire">
            <summary>
                Could not find the questionnaire
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.NoControl">
            <summary>
                Could not find the control
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.NoPage">
            <summary>
                Could not find the page
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.MissingQuestion">
            <summary>
                Missing question, could not find the specified question. <br/>
                TODO::Better explain in which case that occurs
                TODO::If related to ADX probably prefix it
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.CannotLoadPageTemplate">
            <summary>
                Could not load the specified page template
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.CannotLoadControl">
            <summary>
                Could not load the specified control
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.Script">
            <summary>
                Error in AskiaScript
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.ScriptShortcut">
            <summary>
                Error in AskiaScript  <br/>
                TODO::Better explain in which case that occurs
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.CaptionShortcut">
            <summary>
                Error in shortcut caption <br/>
                TODO::Better explain in which case that occurs
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InfiniteLoop">
            <summary>
                Possible infinite loop
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.RunTime">
            <summary>
                Runtime error. <br />
                The AskiaScript compilation succeed but could not be evaluated at runtime
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidLanguage">
            <summary>
                Invalid language, <br />
                TODO::Better explain in which case that occurs
                TODO::Maybe the language of the survey
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidVersion">
            <summary>
                Invalid version, <br />
                TODO::Better explain in which case that occurs
                TODO::Maybe the scenario, in that case change the Version to Scenario
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.ODBCStartQuery">
            <summary>
                Could not execute SQL query, <br />
                TODO::Better explain in which case that occurs
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.ODBCImport">
            <summary>
                Could no execute the SQL query to import data. <br />
                TODO::Better explain in which case that occurs
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingProperty">
            <summary>
                Missing ADX property.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingContent">
            <summary>
                Missing ADX content.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxInvalidZip">
            <summary>
                Invalid ADX file compression. <br />
                The zip file is invalid.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxInvalidXMLFile">
            <summary>
                Invalid ADX config XML file.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxInvalidSWFFile">
            <summary>
                Invalid ADX Flash file.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingFile">
            <summary>
                Could not retrieve the file associated with the ADX content.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxInvalidXML">
            <summary>
                Invalid ADX config XML definition.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingCachedFile">
            <summary>
                Could not find the dynamic file associated with the ADX content.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxNoOutput">
            <summary>
                Could not find an ADX output.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxOutputConditionError">
            <summary>
                Error while interpreting the condition of the ADX output.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxBinaryNoDynamic">
            <summary>
                A binary file could not be dynamic in ADX.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxBinaryNeedsYield">
            <summary>
                The `yield` node is require to define how to display arbitrary binary file in ADX.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxCannotCreateDirectory">
            <summary>
                Unable to create the ADX directory.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxTextNoStaticOrShare">
            <summary>
                Could not use the `Content.ToText()` method for ADX static/shared files.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingAskiaHeadTag">
            <summary>
                Missing &lt;askia-head /&gt; tag in the ADX master page.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingAskiaFormTag">
            <summary>
                Missing &lt;askia-form&gt; tag in the ADX master page.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingAskiaFormCloseTag">
            <summary>
                Missing &lt;/askia-form&gt; close tag in the ADX master page.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingAskiaQuestionsTag">
            <summary>
                Missing &lt;askia-questions /&gt; tag in the ADX master page.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.AdxMissingAskiaFootTag">
            <summary>
                Missing &lt;askia-foot /&gt; tag in the ADX master page.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidQuestionId">
            <summary>
                The specified question id is invalid
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidQuestionPosition">
            <summary>
                The specified question position is invalid
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidRangeIdsOrder">
            <summary>
                The order of IDs into the range are incorrect
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.UnableToMoveQuestionsOrElements">
            <summary>
                Could not move questions or elements
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.UnableToIndentQuestionsOrElements">
            <summary>
                Could not indent questions or elements
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.UnableToUnindentQuestionsOrElements">
            <summary>
                Could not unindent questions or elements
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.UnableToSaveStructureModifications">
            <summary>
                Could not save structure modifications
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidElementId">
            <summary>
                The specified element id is invalid
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.UnmovableElementType">
            <summary>
                The specified element type cannot be moved
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidElementMove">
            <summary>
                The specified element move is invalid
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidRoutingId">
            <summary>
                The specified routing id is invalid
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidRoutingName">
            <summary>
            The supplied routing name is invalid.
            </summary>    
        </member>
        <member name="F:AskiaCore.ErrorType.NonUniqueRoutingName">
            <summary>
            The supplied routing name is not unique.
            </summary>    
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidRoutingCondition">
            <summary>
            The supplied routing condition is not valid.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidRoutingPosition">
            <summary>
            The supplied routing position is not valid.
            </summary>
        </member>
        <member name="F:AskiaCore.ErrorType.InvalidScenarioName">
            <summary>
            The supplied scenario name is invalid.
            </summary>    
        </member>
        <member name="F:AskiaCore.ErrorType.NonUniqueScenarioName">
            <summary>
            The supplied scenario name is not unique.
            </summary>    
        </member>
        <member name="T:AskiaCore.IError">
            <summary>
                Error returned by AskiaCore
            </summary>
        </member>
        <member name="P:AskiaCore.IError.Type">
            <summary>
                Indicatas the type of the error
            </summary>
        </member>
        <member name="P:AskiaCore.IError.Code">
            <summary>
                Internal error code, when available
            </summary>
        </member>
        <member name="P:AskiaCore.IError.Source">
            <summary>
                Source context of the error, when available.
            </summary>
        </member>
        <member name="P:AskiaCore.IError.StartingPosition">
            <summary>
                Start position of the error in the source context when available.
            </summary>
        </member>
        <member name="P:AskiaCore.IError.Length">
            <summary>
                Length of the error in the source context
            </summary>
        </member>
        <member name="P:AskiaCore.IError.ExtraDescription">
            <summary>
                Additional information concerning the error
            </summary>
        </member>
        <member name="T:AskiaCore.IExtensionProperty">
            <summary>
            Represents the key/value pair extension (ADX) property
            </summary>
        </member>
        <member name="P:AskiaCore.IExtensionProperty.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:AskiaCore.IExtensionProperty.Value">
            <summary>
            Value assign to the property
            </summary>
        </member>
        <member name="P:AskiaCore.IExtensionProperty.IsInherited">
            <summary>
            Tells if the property is inherited or set at the current level
            </summary>
        </member>
        <member name="T:AskiaCore.IExtensionPropertyCollection">
            <summary>
            Collection of the extension (ADX) property
            </summary>
        </member>
        <member name="P:AskiaCore.IExtensionPropertyCollection.Count">
            <summary>
            Number of properties in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IExtensionPropertyCollection.Item(System.String)">
            <summary>
            Value associated with the specified property name
            </summary>
            <param name="name">Name of the property to read</param>
        </member>
        <member name="M:AskiaCore.IExtensionPropertyCollection.Contains(System.String)">
            <summary>
            Indicates if the collection contains the specified property
            </summary>
            <param name="name">Name of the property to search</param>
        </member>
        <member name="M:AskiaCore.IExtensionPropertyCollection.Create(System.String,System.String)">
            <summary>
            Create a property using the specified name and value
            </summary>
            <remarks>
            If the name of the property already exist, this method override it's value
            </remarks>
            <param name="name">Name of the property to create</param>
            <param name="value">Value of the new create property</param>
            <returns>The property that has been created</returns>
        </member>
        <member name="M:AskiaCore.IExtensionPropertyCollection.Remove(System.String)">
            <summary>
            Remove the specified property from the collection
            </summary>
            <param name="name">Name of the property to remove</param>
            <returns>Returns true if the property was found and removed</returns>
        </member>
        <member name="M:AskiaCore.IExtensionPropertyCollection.Clear">
            <summary>
            Remove all properties from the collection
            </summary>
        </member>
        <member name="M:AskiaCore.IExtensionPropertyCollection.GetResolvedCascadingValues">
            <summary>
            Get all properties including the ones resolving to default values
            </summary>
            <returns>Returns a collection of properties</returns>
        </member>
        <member name="T:AskiaCore.IExtensionPropertyIterator">
            <summary>
            Extension properties collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.IInterviewWebInformation">
            <summary>
            Information of the web browser doing the interview
            </summary>
            <seealso cref="P:AskiaCore.IInterview.WebInformation"/>
        </member>
        <member name="P:AskiaCore.IInterviewWebInformation.Identity">
            <summary>
            Identity of the web browser
            </summary>
            <example>
            <code>
              // The above string is on a single line
              // carriage return are only use for readability
              "name:\"Chrome\",
              version:\"50.0.2661.102\",
              os:\"Windows\",
              mobile:false,
              tablet:false,
              userAgent:\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\",
              timeOffset:2"
            </code>
            </example>
        </member>
        <member name="P:AskiaCore.IInterviewWebInformation.Resolution">
            <summary>
            Resolution of the web browser's device
            </summary>
            <example>
            <code>
              // The above string is on a single line
              // carriage return are only use for readability
              "screen-availWidth:2560,
              screen-availHeight:1334,
              screen-width:2560,
              screen-height:1440,
              screen-colorDepth:24,
              window-width:1708,
              window-height:1130"
            </code>
            </example>
        </member>
        <member name="P:AskiaCore.IInterviewWebInformation.Capabilities">
            <summary>
            Browser capabilities
            </summary>
            <example>
            <code>
              // The above string is on a single line
              // carriage return are only use for readability
              "Javascript:true,
              Flash:"21.0.0.0",QuickTime:false,WindowsMediaPlayer:false,Silverlight:false,
              AdobeReader:false,RealPlayer:false,
              flexbox:true,flexboxlegacy:true,
              canvas:true,canvastext:true,webgl:true,
              touch:false,
              geolocation:true,
              postmessage:true,
              websqldatabase:true,indexeddb:true,
              hashchange:true,history:true,
              draganddrop:true,
              websockets:true,
              rgba:true,hsla:true,
              multiplebgs:true,backgroundsize:true,
              borderimage:true,borderradius:true,
              boxshadow:true,textshadow:true,
              opacity:true,
              cssanimations:true,csscolumns:true,cssgradients:true,
              cssreflections:true,csstransforms:true,csstransforms3d:true,
              csstransitions:true,
              fontface:true,generatedcontent:true,
              video:true,ogg:true,h264:true,webm:true,
              audio:true,mp3:true,wav:true,m4a:true,
              localstorage:true,sessionstorage:true,
              webworkers:true,
              applicationcache:true,
              svg:true,inlinesvg:true,smil:true,svgclippaths:true,
              autocomplete:true,autofocus:true,
              list:true,placeholder:true,max:true,min:true,
              multiple:true,pattern:true,required:true,step:true,
              search:true,tel:true,url:true,email:true,
              datetime:false,date:true,month:true,week:true,time:false,
              datetime-local:true,number:true,range:true,color:true,
              battery:false,lowbattery:false,
              cookies:true,
              bgpositionshorthand:true,bgpositionxy:true,bgrepeatround:false,
              bgrepeatspace:false,bgsizecover:true,
              boxsizing:true,
              csscalc:true,cubicbezierrange:true,
              display-runin:false,display-table:true,
              cssfilters:true,csshyphens:false,softhyphens:true,softhyphensfind:true,
              lastchild:true,cssmask:false,
              mediaqueries:true,object-fit:true,
              overflowscrolling:false,
              pointerevents:true,csspositionsticky:false,cssremunit:true,
              regions:false,cssresize:true,cssscrollbar:true,
              subpixelfont:true,supports:true,
              userselect:false,classlist:true,
              createelement-attrs:false,datalistelem:true,
              details:true,outputelem:true,
              progressbar:true,meter:true,ruby:true,
              texttrackapi:true,track:true,
              strictmode:true,devicemotion:true,deviceorientation:true,
              filereader:true,fileinput:true,formattribute:true,
              filesystem:true,speechinput:false,
              formvalidationapi:true,formvalidationmessage:true,
              formvalidation:true,fullscreen:true,
              ie8compat:false,
              json:true,mathml:false,unicode:true,
              userdata:false,websocketsbinary:true,
              exif-orientation:false"
            </code>
            </example>
        </member>
        <member name="T:AskiaCore.IInterviewMethodResult">
            <summary>
            Represents the result of many <see cref="T:AskiaCore.IInterview"/> methods
            </summary>
        </member>
        <member name="P:AskiaCore.IInterviewMethodResult.IsCompleted">
            <summary>
            Indicates if the interview is completed
            </summary>
        </member>
        <member name="T:AskiaCore.IInterview">
            <summary>
            Represents an interview
            </summary>
        </member>
        <member name="M:AskiaCore.IInterview.MoveOn(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Try to save the answers and to move on the next visible page
            </summary>
            <remarks>
                <para>
                    This method doesn't necesseraly move to the page that follow the current page.<br />
                    According to the specified parameters, this method could:<br/>
                    - stay on the same page<br/>
                    - go to the previous visible page<br/>
                    - go to the next visible page<br/>
                </para>
                <para>
                    Notice that some routings and properties could redirect the respondent to a previous or to a far next page.
                </para>
            </remarks>
            <param name="parameters">Respondent answers and web parameters</param>
            <returns>Returns <see cref="T:AskiaCore.IInterviewMethodResult"/> until a page is accessible</returns>
        </member>
        <member name="P:AskiaCore.IInterview.CurrentPage">
            <summary>
            Retrieves the current interview page element
            </summary>
        </member>
        <member name="P:AskiaCore.IInterview.CurrentPosition">
            <summary>
            Retrieves the current position of the interview
            </summary>
        </member>
        <member name="P:AskiaCore.IInterview.PreviousPosition">
            <summary>
            Retrieves the previous position of the interview
            </summary>
        </member>
        <member name="P:AskiaCore.IInterview.PreviousPage">
            <summary>
            Retrieves the previous interview page element
            </summary>
        </member>
        <member name="P:AskiaCore.IInterview.NextPosition">
            <summary>
            Retrieves the next possible position of the interview
            </summary>
        </member>
        <member name="P:AskiaCore.IInterview.NextPage">
            <summary>
            Retrieves the next possible interview page element
            </summary>
        </member>
        <member name="P:AskiaCore.IInterview.WebInformation">
            <summary>
            Retrieves the web browser information
            </summary>
        </member>
        <member name="P:AskiaCore.IInterview.Seed">
            <summary>
            Retrieves the seed of the interview.
            </summary>
        </member>
        <member name="M:AskiaCore.IInterview.Interpret(System.String)">
             <summary>
                 Interpret the AskiaScript contains in the specified text.
             </summary>
             <example>
                 <para>Interpret the AskiaScript keyword for the current date.</para>
                 <code>
                     using AskiaCore;
             
                     namespace MyApp
                     {
                         public class MyProgram
                         {
                             static void Main()
                             {
                                 // Initialize the database connection string (Where the survey will be stored)
                                 Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
            
                                 // Create a context with the user 1
                                 IContext context = ContextFactory.Create();
                                 context.UserId = 1;
                                 context.SessionId = "xxxxx-xxxxx-xxxxx-xxxxxx";
                                 context.LanguageId = 2057; // Edit the survey with this language (English)
                         
                                 // Get the survey with the AskiaPortal id 1
                                 ISurvey survey = SurveyFactory.Get(context, 1);
                                 IInterview interview = survey.CreateInterview();
                                 
                                 // Specify the web context
                                 interview.WebInformation.Identity = "name:\"Chrome\",version:\"50.0.2661.102\",os:\"Windows\",mobile:false,tablet:false,userAgent:\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\",timeOffset:2";
                                 interview.WebInformation.Resolution = "screen-availWidth:2560,screen-availHeight:1334,screen-width:2560,screen-height:1440,screen-colorDepth:24,window-width:1708,window-height:1130";
                                 interview.WebInformation.Capabilities = "javascript:true";
             
                                 IDictionary&lt;string, string&gt; parameters = new Dictionary&lt;string, string&gt;();
                                 interview.MoveNext(parameters);
                                 string interpretedText = interview.Interpret("The current time is: !!Now!!");
                                 Console.WriteLine(interpretedText);
             
                                 // Release the database connection
                                 Persistent.EndDatabaseConnection();
                             }
                         }
                     }
                 </code>
             </example>
             <param name="text">Text to interpret.</param>
             <returns>
                 Interpreted string.
             </returns>
        </member>
        <member name="P:AskiaCore.IInterview.ResourcesFolderUrl">
            <summary>
            Defines or returns the URL of the `Resources` folder for this interview.
            </summary>
        </member>
        <member name="M:AskiaCore.IInterview.Save">
            <summary>
            Persists an interview to file.
            </summary>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IInterview.Load">
            <summary>
            Loads an interview from file.
            </summary>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.ILanguage">
            <summary>
            Language interface
            </summary>
        </member>
        <member name="P:AskiaCore.ILanguage.Id">
            <summary>
            Id of the language
            </summary>
        </member>
        <member name="P:AskiaCore.ILanguage.LocaleName">
            <summary>
            Locale Name of the language
            </summary>
        </member>
        <member name="T:AskiaCore.ILanguageCollection">
            <summary>
            Language collection
            </summary>
        </member>
        <member name="P:AskiaCore.ILanguageCollection.Count">
            <summary>
            Number of languages in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.ILanguageCollection.Item(System.Int32)">
            <summary>
            Find a language by id
            </summary>
            <param name="id">Id of the language to find</param>
        </member>
        <member name="M:AskiaCore.ILanguageCollection.Add(AskiaCore.ILanguage)">
            <summary>
            Adds a new language in the collection given its name
            </summary>
            <param name="language">Language to add</param>
            <returns>Returns the newly added language</returns>
        </member>
        <member name="M:AskiaCore.ILanguageCollection.Remove(System.Int32)">
            <summary>
            Remove a language from the collection given its id
            </summary>
            <param name="id">Id of the language to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.ILanguageIterator">
            <summary>
            Language collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.LanguageFactory">
            <summary>
            Language factory
            </summary>
        </member>
        <member name="M:AskiaCore.LanguageFactory.GetAllLanguages">
            <summary>
            Get all existing languages
            </summary>
            <returns>Returns a collection of all existing languages</returns>
        </member>
        <member name="T:AskiaCore.IPageRender">
            <summary>
            Represents the result of the page rendering
            </summary>
        </member>
        <member name="P:AskiaCore.IPageRender.OutputId">
            <summary>
            Id of the output that has been used
            </summary>
        </member>
        <member name="P:AskiaCore.IPageRender.Html">
            <summary>
            Full HTML code of the rendered page (including head, form, foot)
            </summary>
        </member>
        <member name="P:AskiaCore.IPageRender.Header">
            <summary>
            Header section of the HTML code of the rendered page
            </summary>
        </member>
        <member name="P:AskiaCore.IPageRender.Form">
            <summary>
            Form section of the HTML code of the rendered page
            </summary>
        </member>
        <member name="P:AskiaCore.IPageRender.Footer">
            <summary>
            Footer section of the HTML code of the rendered page
            </summary>
        </member>
        <member name="P:AskiaCore.IPageRender.IsRendered">
            <summary>
            Indicates if the page has been successfully rendered
            </summary>
        </member>
        <member name="P:AskiaCore.IPageRender.Errors">
            <summary>
            Collection of possible errors
            </summary>
        </member>
        <member name="T:AskiaCore.IPageTemplate">
            <summary>
            Page template interface
            </summary>
        </member>
        <member name="P:AskiaCore.IPageTemplate.Name">
            <summary>
            Name of the template
            </summary>
        </member>
        <member name="P:AskiaCore.IPageTemplate.Config">
            <summary>
            Configuration of the template
            </summary>
            <remarks>
            This the content of the <i>config.xml</i> file inside the template
            </remarks>
        </member>
        <member name="P:AskiaCore.IPageTemplate.Data">
            <summary>
            Data contained within the file
            </summary>
        </member>
        <member name="M:AskiaCore.IPageTemplate.LoadFromDirectory(System.String)">
            <summary>
            Loads the template from a directory
            </summary>
            <param name="directory">Directory from which the template will be loaded</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IPageTemplate.LoadFromFileAndExtract(System.String,System.String)">
            <summary>
            Loads the template from a file and extract its content to a directory
            </summary>
            <param name="srcPath">Path of the file from which the template will be loaded</param>
            <param name="dstDirectory">Directory where the template will be extracted</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IPageTemplate.LoadFromMemoryAndExtract(System.String)">
            <summary>
            Loads the template from memory and extracts its content to a directory
            </summary>
            <param name="directory">Directory where the template will be extracted</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IPageTemplate.RenderForQuestion(AskiaCore.ISurvey,AskiaCore.IInterview,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Renders the template for a given question of a given survey interview
            </summary>
            <param name="survey">Survey for which the template will be rendered</param>
            <param name="interview">Interview for which the template will be rendered</param>
            <param name="question">Question for which the template will be rendered</param>
            <param name="ouptutId">Id of the output to render for the template</param>
            <param name="properties">Collection of properties used to render the template</param>
            <returns>Return the rendered template</returns>
        </member>
        <member name="T:AskiaCore.IPageTemplateCollection">
            <summary>
            Page template collection
            </summary>
        </member>
        <member name="P:AskiaCore.IPageTemplateCollection.Count">
            <summary>
            Number of templates in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IPageTemplateCollection.Item(System.Int32)">
            <summary>
            Find a template by id
            </summary>
            <param name="id">Id of the template to find</param>
        </member>
        <member name="P:AskiaCore.IPageTemplateCollection.Item(System.String)">
            <summary>
            Find a template by name
            </summary>
            <param name="name">Name of the template to find</param>
        </member>
        <member name="M:AskiaCore.IPageTemplateCollection.Create(System.String)">
            <summary>
            Creates a new template in the collection given its name
            </summary>
            <param name="name">Name of the template to create</param>
            <returns>Returns the newly created template</returns>
        </member>
        <member name="M:AskiaCore.IPageTemplateCollection.Remove(System.Int32)">
            <summary>
            Remove a template from the collection given its id
            </summary>
            <param name="id">Id of the template to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IPageTemplateCollection.Remove(System.String)">
            <summary>
            Remove a template from the collection given its name
            </summary>
            <param name="name">Name of the template to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IPageTemplateIterator">
            <summary>
            Page template collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.IPageTemplateCreationResult">
            <summary>
            Represents the result of methods that creates a Page template
            </summary>
        </member>
        <member name="P:AskiaCore.IPageTemplateCreationResult.PageTemplate">
            <summary>
            Created Page template on success
            </summary>
        </member>
        <member name="T:AskiaCore.PageTemplatesFactory">
            <summary>
            Page templates factory
            </summary>
        </member>
        <member name="M:AskiaCore.PageTemplatesFactory.GetPageTemplatesMap(AskiaCore.IContext)">
            <summary>
            Retrieves all the available templates
            </summary>
            <param name="ctx">Context used by the template</param>
            <returns>Returns a dictionary of all templates mapped by their id</returns>
        </member>
        <member name="M:AskiaCore.PageTemplatesFactory.Create(AskiaCore.IContext)">
            <summary>
            Creates a new template
            </summary>
            <param name="ctx">Context used by the template</param>
            <returns>Returns the newly created template</returns>
        </member>
        <member name="M:AskiaCore.PageTemplatesFactory.Get(AskiaCore.IContext,System.Int32)">
            <summary>
            Retrieves a template given its id
            </summary>
            <param name="context">Context used by the template</param>
            <param name="id">Id of the template to retrieve</param>
            <returns>Returns the found template</returns>
        </member>
        <member name="M:AskiaCore.PageTemplatesFactory.CreateFromDirectory(AskiaCore.IContext,System.String)">
            <summary>
            Creates a template from a directory
            </summary>
            <param name="ctx">Context used by the template</param>
            <param name="directory">Directory from which the template will be created</param>
            <returns>Returns the newly created template</returns>
        </member>
        <member name="M:AskiaCore.PageTemplatesFactory.CreateFromFileAndExtract(AskiaCore.IContext,System.String,System.String)">
            <summary>
            Creates a template from a file and extract its content to a directory
            </summary>
            <param name="ctx">Context used by the template</param>
            <param name="srcPath">Path of the file from which the template will be created</param>
            <param name="dstDirectory">Directory where the template will be extracted</param>
            <returns>Returns the newly created template</returns>
        </member>
        <member name="M:AskiaCore.PageTemplatesFactory.CreateFromFileAndExtract(AskiaCore.IContext,System.Collections.Generic.ICollection{System.Byte},System.String)">
            <summary>
            Creates a template from a file and extract its content to a directory
            </summary>
            <param name="ctx">Context used by the template</param>
            <param name="fileData">File data from which the template will be created</param>
            <param name="dstDirectory">Directory where the template will be extracted</param>
            <returns>Returns the newly created template</returns>
        </member>
        <member name="T:AskiaCore.QuestionType">
            <summary>
            Enumeration of the question type
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.Chapter">
            <summary>
            Question chapter
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.Single">
            <summary>
            Question expecting a single selectable response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.Multiple">
            <summary>
            Question expecting multiple selectable responses
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.Numeric">
            <summary>
            Question expecting a numeric response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.Open">
            <summary>
            Question expecting an open text response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.DateTime">
            <summary>
            Question expecting a date and/or a time as a response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.LoopGrid">
            <summary>
            Question loop representing a grid
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.LoopIteration">
            <summary>
            Question loop allowing the user to select the loop item
            at each iteration
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.LoopSelection">
            <summary>
            Question loop allowing the user to select all loop items
            before the loop start
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.LoopNumber">
            <summary>
            Question loop defined by a number of iteration
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.Bundle">
            <summary>
            Custom question bundle used to group miscellaneous
            other questions
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.BundleGrid">
            <summary>
            Question bundle used to group a grid loop with its
            internal questions
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.BundleSemiOpen">
            <summary>
            Question bundle used to group a closed question
            with an open ended one
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.TriggerStart">
            <summary>
            System question triggered at the beginning of the interview
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.TriggerEnd">
            <summary>
            System question triggered at the end of the interview
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionType.TriggerAll">
            <summary>
            System question triggered at each question during the interview
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionDateTimeType">
            <summary>
            Enumeration of the question datetime type
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionDateTimeType.DateTime">
            <summary>
            Both date and time
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionDateTimeType.DateOnly">
            <summary>
            Only a date
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionDateTimeType.TimeOnly">
            <summary>
            Only a time
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionLinkType">
            <summary>
            Enumeration of the question link type
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionLinkType.None">
            <summary>
            No response linked
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionLinkType.All">
            <summary>
            All responses linked
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionLinkType.Selected">
            <summary>
            Only selected responses linked
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionLinkType.NoneSelected">
            <summary>
            Only non selected responses linked
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionLinkType.RecursivelySelected">
            <summary>
            Link with selected responses across all linked questions
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionRotationType">
            <summary>
            Enumeration of the question rotation type
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionRotationType.None">
            <summary>
            No rotation
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionRotationType.Random">
            <summary>
            Randomly rotated responses
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionRotationType.Circular">
            <summary>
            Responses shifted at each interview
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionRotationType.Inverted">
            <summary>
            Inverted responses order
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionRotationType.Alphabetical">
            <summary>
            Responses sorted alphabetically
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionVisibilityType">
            <summary>
            Enumeration of the question visibility type
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionVisibilityType.Full">
            <summary>
            The question and its children questions are all visible
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionVisibilityType.OnlySubQuestions">
            <summary>
            The question is not visible but its children are
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionVisibilityType.None">
            <summary>
            The question and its children questions are not visible
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionImportationType">
            <summary>
            Enumeration of the question importation type
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.None">
            <summary>
            No data is imported
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.ListField">
            <summary>
            List imported fields
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.ODBC">
            <summary>
            Data is imported from an external database such as an *.mdb file.ask
            the question even when it has not been specified in the received link
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.Panel">
            <summary>
            Data is imported from a Lister field, *.lst, linked to a panel
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.GeoCati">
            <summary>
            Geographic co-ordinate data is imported from a geoparam.dat file
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.InternetParameter">
            <summary>
            Data is imported from an Internet parameter contained in a URL
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.PlatformOne">
            <summary>
            Platform One data is imported, as defined in a URL
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationType.Fulcrum">
            <summary>
            Fulcrum sample data is imported, as defined in a URL
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionImportationClosedMatchingType">
            <summary>
            Enumeration of the question importation type for closed responses
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationClosedMatchingType.Caption">
            <summary>
            The external data contains the response items' text captions
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationClosedMatchingType.Order">
            <summary>
            The external data contained the response items' order
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationClosedMatchingType.EntryCode">
            <summary>
            The external data contained the response items' numerical entry codes
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionImportationPanelUpdateType">
            <summary>
            Enumeration of the question importation update type for panels
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationPanelUpdateType.ReadWrite">
            <summary>
            Read and write data from and into the panel
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationPanelUpdateType.Read">
            <summary>
            Only read data from the panel
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionImportationPanelUpdateType.Write">
            <summary>
            Only write data to the panel
            </summary>
        </member>
        <member name="T:AskiaCore.QuestionTypeForDefaultControl">
            <summary>
            Enumeration of the question type for the default controls
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.Chapter">
            <summary>
            Question chapter
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.Single">
            <summary>
            Question expecting a single selectable response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.Multiple">
            <summary>
            Question expecting multiple selectable responses
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.Numeric">
            <summary>
            Question expecting a numeric response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.Open">
            <summary>
            Question expecting an open text response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.DateTime">
            <summary>
            Question expecting a date and/or a time as a response
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.LoopGrid">
            <summary>
            Question loop representing a grid
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.LoopIteration">
            <summary>
            Question loop allowing the user to select the loop item
            at each iteration
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.LoopSelection">
            <summary>
            Question loop allowing the user to select all loop items
            before the loop start
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.LoopNumber">
            <summary>
            Question loop defined by a number of iteration
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.Bundle">
            <summary>
            Custom question bundle used to group miscellaneous
            other questions
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.ChapterInLoop">
            <summary>
            Question of type Chapter in a loop
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.SingleInLoop">
            <summary>
            Question of type Single in a loop
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.MultipleInLoop">
            <summary>
            Question of type Multiple in a loop
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.NumericInLoop">
            <summary>
            Question of type Numeric in a loop
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.OpenInLoop">
            <summary>
            Question of type Open in a loop
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.DateTimeInLoop">
            <summary>
            Question of type DateTime in a loop
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.BundleGrid">
            <summary>
            Question bundle used to group a grid loop with its
            internal questions
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.BundleSemiOpen">
            <summary>
            Question bundle used to group a closed question
            with an open ended one
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.TriggerStart">
            <summary>
            System question triggered at the beginning of the interview
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.TriggerEnd">
            <summary>
            System question triggered at the end of the interview
            </summary>
        </member>
        <member name="F:AskiaCore.QuestionTypeForDefaultControl.TriggerAll">
            <summary>
            System question triggered at each question during the interview
            </summary>
        </member>
        <member name="T:AskiaCore.IQuestionImportationSettings">
            <summary>
            Importation Settings Interface
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionImportationSettings.Type">
            <summary>
            Type of importation
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionImportationSettings.FieldName">
            <summary>
            Name of the field from which to import
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionImportationSettings.ClosedMatchingType">
            <summary>
            Type of matching used for closed questions
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionImportationSettings.IsInvisibleWhenImported">
            <summary>
            Indicate if the question becomes invisible when the data is imported
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionImportationSettings.DatabaseDSN">
            <summary>
            Connection string to the database
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionImportationSettings.SqlQuery">
            <summary>
            SQL query used to import data
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionImportationSettings.PanelUpdateType">
            <summary>
            Type of update when using a panel
            </summary>
        </member>
        <member name="T:AskiaCore.LinkedResponseVisibility">
            <summary>
            Enumeration of the linked response visibility
            </summary>
        </member>
        <member name="F:AskiaCore.LinkedResponseVisibility.Inherit">
            <summary>
            The linked response inherit visibility from the source response
            </summary>
        </member>
        <member name="F:AskiaCore.LinkedResponseVisibility.AlwaysHidden">
            <summary>
            The linked response is always hidden
            </summary>
        </member>
        <member name="F:AskiaCore.LinkedResponseVisibility.AlwaysVisible">
            <summary>
            The linked response is always visible
            </summary>
        </member>
        <member name="T:AskiaCore.ILinkedResponse">
            <summary>
            Linked Response Interface
            </summary>
        </member>
        <member name="P:AskiaCore.ILinkedResponse.Id">
            <summary>
            Id of the linked response
            </summary>
        </member>
        <member name="P:AskiaCore.ILinkedResponse.Visibility">
            <summary>
            Visibility of the linked response
            </summary>
        </member>
        <member name="T:AskiaCore.ILinkedResponseCollection">
            <summary>
            Linked responses collection
            </summary>
        </member>
        <member name="P:AskiaCore.ILinkedResponseCollection.Count">
            <summary>
            Number of linked response in the collection
            </summary>
        </member>
        <member name="M:AskiaCore.ILinkedResponseCollection.Create(System.Int32,AskiaCore.LinkedResponseVisibility)">
            <summary>
            Create a linked response given its visibility
            </summary>
            <param name="responseId">Id of the response to link to</param>
            <param name="visibility">Visibility of the linked response</param>
            <returns>Returns the newly created linked response</returns>
        </member>
        <member name="M:AskiaCore.ILinkedResponseCollection.Remove(System.Int32)">
            <summary>
            Remove a linked response from the collection given its responseId
            </summary>
            <param name=" LinkedResponseId">Id of the linked response to remove</param>
            <returns>Returns a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.ILinkedResponseIterator">
            <summary>
            Linked responses collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.IQuestion">
            <summary>
            Question interface
            </summary>
        </member>
        <member name="M:AskiaCore.IQuestion.IsReachable">
            <summary>
            Defines if the question is reachable
            </summary>
            <remarks>
            A question is reachable if it is not deleted and if its parent is also <b>reachable</b>,
            this means all of the question ancestors are checked
            </remarks>
            <returns>Returns a boolean indicating if the question is reachable</returns>
        </member>
        <member name="P:AskiaCore.IQuestion.Shortcut">
            <summary>
            Shortcut of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MainCaption">
            <summary>
            The main caption of the question
            </summary>
        </member>
        <member name="M:AskiaCore.IQuestion.GetMainCaptions">
            <summary>
            Retrieve main captions for all languages in the survey.
            </summary>
        </member>
        <member name="M:AskiaCore.IQuestion.SetMainCaptions(System.Collections.Generic.IDictionary{System.Int32,System.String})">
            <summary>
            Set main captions for languages in the survey.
            </summary>
        </member>
        <member name="M:AskiaCore.IQuestion.GetAnalyseCaptions">
            <summary>
            Retrieve Analyse captions for all languages in the survey.
            </summary>
        </member>
        <member name="M:AskiaCore.IQuestion.SetAnalyseCaptions(System.Collections.Generic.IDictionary{System.Int32,System.String})">
            <summary>
            Set Analyse captions for languages in the survey.
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.AnalyseCaption">
            <summary>
            Analyse caption of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.Type">
            <summary>
            Type of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.DateTimeType">
            <summary>
            DateTime type of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.ParentId">
            <summary>
            Id of the parent question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.Position">
            <summary>
            Position of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.PrevSibling">
            <summary>
            Previous sibling question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.NextSibling">
            <summary>
            Next sibling question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.FirstChild">
            <summary>
            First child question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.LastChild">
            <summary>
            Last child question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.AllowsNoResponses">
            <summary>
            Indicates if answering the question is mandatory
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.NoResponseEntry">
            <summary>
            The entry equivalent to a non response
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.DecimalPrecision">
            <summary>
            Number of digits after decimal point for numeric questions
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.Pattern">
            <summary>
             Regular expressions to validate the response of open questions
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MinValue">
            <summary>
            <ul>
            <li>Minimum value for numeric questions</li>
            <li>Minimum number of characters for open questions</li>
            </ul>
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MaxValue">
            <summary>
            <ul>
            <li>Maximum value for numeric questions</li>
            <li>Maximum number of characters for open questions</li>
            </ul>
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MinDateTimeValue">
            <summary>
            Minimum value for datetime questions
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MaxDateTimeValue">
            <summary>
            Maximum value for datetime questions
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MinResponseCount">
            <summary>
            Minimum number of responses
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MaxResponseCount">
            <summary>
            Maximum number of responses
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MaxVisibleResponses">
            <summary>
            Maximum number of visible responses in a loop iteration
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.LinkType">
            <summary>
            Link type of the questio
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.AlwaysLinkExclusiveResponses">
            <summary>
            Indicates if links include exclusive responses
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.LinkedQuestionId">
            <summary>
            Id of the linked question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsLevelLinked">
            <summary>
            Indicates if the link is done on the level
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.RotationType">
            <summary>
            Rotation type of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.RotationSeed">
            <summary>
            Seed of the random rotation
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.MergingPageElementId">
            <summary>
            Id of the associated merged page if there is one
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsFirstInPage">
            <summary>
            Indicates if the question is currently the first one in its page
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsLastInPage">
            <summary>
            Indicates if the question is currently the last one in its page
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsAtPageBorder">
            <summary>
            Indicates if the question is currently either
            the first or the last one in its page
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.Visibility">
            <summary>
            Visibility type of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsVisibleInAnalyse">
            <summary>
            Indicates if the question is visible in <i>Analyse</i>
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsLevelDeveloped">
            <summary>
            Indicates if the level is developed in <i>Analyse</i>
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsScaled">
            <summary>
            Indicates if the question is scaled
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsRanked">
            <summary>
            Indicates if the question is ranked
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsProbability">
            <summary>
            Indicates if the question is a probability question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsRecordable">
            <summary>
            Indicates if recording can be done on the question (CATI)
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IsExcludedFromTranslation">
            <summary>
            Indicates that the question should not be translated
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.QuestionIdToIncrement">
            <summary>
            Id of the question to increment
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.IVRNumber">
            <summary>
            IVR Number of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.UserData">
            <summary>
            Data the user can add to the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.ContainerElement">
            <summary>
            Element containing the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.PageElement">
            <summary>
            Page element containing the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.ControlElement">
            <summary>
            Control element of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.ImportationSettings">
            <summary>
            Importation settings for the question
            </summary>
        </member>
        <member name="M:AskiaCore.IQuestion.MoveResponses(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Move responses to a given destination
            </summary>
            <remarks>
            TODO Movement rules
            </remarks>
            <param name="responseIds">Ids of responses to move</param>
            <param name="targetParentId">Id of the parent target response</param>
            <param name="targetPosition">Position at which the responses will be moved as the parent target child</param>
            <returns>Return the result of the movement</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.MoveResponses(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32,AskiaCore.IModifiedEntities@)">
            <summary>
            Move responses to a given destination
            </summary>
            <remarks>
            TODO Movement rules
            </remarks>
            <param name="responseIds">Ids of responses to move</param>
            <param name="targetParentId">Id of the parent target response</param>
            <param name="targetPosition">Position at which the responses will be moved as the parent target child</param>
            <param name="modifiedEntities">Collection of entities affected by the movement</param>
            <returns>Return the result of the movement</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.IndentResponses(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Indent responses
            </summary>
            <remarks>
            TODO Indent rules
            </remarks>
            <param name="responseIds">Ids of responses to indentation</param>
            <returns>Return the result of the indentation</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.IndentResponses(System.Collections.Generic.IEnumerable{System.Int32},AskiaCore.IModifiedEntities@)">
            <summary>
            Indent responses
            </summary>
            <remarks>
            TODO Indent rules
            </remarks>
            <param name="responseIds">Ids of responses to indent</param>
            <param name="modifiedEntities">Collection of entities affected by the indentation</param>
            <returns>Return the result of the indentation</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.UnindentResponses(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Unindent responses
            </summary>
            <remarks>
            TODO Indent rules
            </remarks>
            <param name="responseIds">Ids of responses to unindent</param>
            <returns>Return the result of the unindentation</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.UnindentResponses(System.Collections.Generic.IEnumerable{System.Int32},AskiaCore.IModifiedEntities@)">
            <summary>
            Unindent responses
            </summary>
            <remarks>
            TODO Indent rules
            </remarks>
            <param name="responseIds">Ids of responses to unindent</param>
            <param name="modifiedEntities">Collection of entities affected by the unindentation</param>
            <returns>Return the result of the unindentation</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.SaveMovedResponsesPositions">
            <summary>
            Saves all the positions and parent ids of the responses
            </summary>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.GetScenarios">
            <summary>
            Retrieve a list the scenarios containing this question
            </summary>
            <returns>Returns a collection of id of the scenario for this question</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.AddToScenario(System.Int32)">
            <summary>
            Add the question to a given scenario
            </summary>
            <param name="scenarioId">Ids of the scenario to which the question will be added</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.RemoveFromScenario(System.Int32)">
            <summary>
            Remove the question from a given scenario
            </summary>
            <param name="scenarioId">Ids of the scenario from which the question will be removed</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="P:AskiaCore.IQuestion.Categories">
            <summary>
            Categories collection for the question
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestion.Responses">
            <summary>
            Responses collection for the question
            </summary>
        </member>
        <member name="M:AskiaCore.IQuestion.GetRecursiveLinkedResponses">
            <summary>
            Retrieve all linked responses recursively based on link type
            </summary>
            <remarks>
            This method retrieves all linked responses to this question
            and also recursively retrieves the linked responses for other linked questions.
            This also includes this question's own responses.
            </remarks>
            <returns>Returns a collection of linked responses</returns>
        </member>
        <member name="M:AskiaCore.IQuestion.GetRecursiveLinkedResponses(System.Int32)">
            <summary>
            Retrieve all linked responses recursively based on link type
            and a visibility source question id
            </summary>
            <remarks>
            This method retrieves all linked responses to this question
            and also recursively retrieves the linked responses for other linked questions.
            This also includes this question's own responses.
            </remarks>
            <remarks>
            TODO: Why is the parameter called VisibilitySourceQuestionId ?
            </remarks>
            <param name="VisibilitySourceQuestionId">Id of the question to which the result linked responses will be associated to</param>
            <returns>Returns a collection of linked responses</returns>
        </member>
        <member name="P:AskiaCore.IQuestion.LinkedResponses">
            <summary>
            Linked responses collection for the question
            </summary>
        </member>
        <member name="T:AskiaCore.IQuestionResult">
            <summary>
            Represents the result of methods that return a question.
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionResult.Question">
            <summary>
            The survey.
            </summary>
        </member>
        <member name="T:AskiaCore.IQuestionCollection">
            <summary>
            Question collection
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionCollection.Count">
            <summary>
            Number of questions in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IQuestionCollection.Item(System.String)">
            <summary>
            Find a question by name
            </summary>
            <param name="shortcut">Shortcut of the question to find</param>
        </member>
        <member name="M:AskiaCore.IQuestionCollection.Create(System.String)">
            <summary>
            Creates a new question in the collection given its shortcut
            </summary>
            <param name="shortcut">Shortcut of the question to create</param>
            <returns>Return the newly created question</returns>
        </member>
        <member name="M:AskiaCore.IQuestionCollection.Create(System.Int32,System.String)">
            <summary>
             Creates a new question in the collection given a parent and its name
            </summary>
            <remarks>
            The question is positioned at the end of its siblings
            </remarks>
            <param name="parentId">Id of the parent question of which the created one will be the child</param>
            <param name="shortcut">Shortcut of the question to create</param>
            <returns>Return the newly created question</returns>
        </member>
        <member name="M:AskiaCore.IQuestionCollection.Create(System.Int32,System.Int32)">
            <summary>
             Creates a new question in the collection given a position
            </summary>
            <param name="parentId">Id of the parent question of which the created one will be the child</param>
            <param name="position">The position at which the question will be created</param>
            <returns>Return the newly created question</returns>
        </member>
        <member name="M:AskiaCore.IQuestionCollection.Create(System.Int32,System.Int32,System.String)">
            <summary>
             Creates a new question in the collection given a position and a shortcut
            </summary>
            <param name="parentId">Id of the parent question of which the created one will be the child</param>
            <param name="position">The position at which the question will be created</param>
            <param name="shortcut">Shortcut of the question to create</param>
            <returns>Return the newly created question</returns>
        </member>
        <member name="M:AskiaCore.IQuestionCollection.Remove(System.Int32)">
            <summary>
             Remove a question from the collection given its id
            </summary>
            <param name="id">Id of the question to remove</param>
            <returns>Returns a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IQuestionCollection.Remove(System.String)">
            <summary>
             Remove a question from the collection given its shortcut
            </summary>
            <param name="shortcut">Shortcut of the question to remove</param>
            <returns>Returns a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IQuestionIterator">
            <summary>
             Question collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.IQuestionsTemplate">
            <summary>
            Questions template interface
            </summary>
        </member>
        <member name="T:AskiaCore.IQuota">
            
             \brief %IQuota interface
            
        </member>
        <member name="P:AskiaCore.IQuota.Survey">
            
             \brief Corresponding Survey
            
        </member>
        <member name="P:AskiaCore.IQuota.Revision">
            
             \brief Revision number
            
        </member>
        <member name="P:AskiaCore.IQuota.IncludeRunningInterviews">
            
             \brief Setting which indicates whether running interviews are taken into account
            
        </member>
        <member name="P:AskiaCore.IQuota.SingleTarget">
            
             \brief Setting Indicating if the quota are using single target or if max and min have to be defined
            
        </member>
        <member name="P:AskiaCore.IQuota.InterviewQuotaType">
            
             \brief Setting which indicates whether running interviews are taken into account
            
        </member>
        <member name="P:AskiaCore.IQuota.TrackChanges">
            
             \brief Enable/disable tracking changes - necessary to support GetUpdate
            
        </member>
        <member name="M:AskiaCore.IQuota.ResetChanges">
            
             \brief Reset all changes
            
        </member>
        <member name="P:AskiaCore.IQuota.MinimumTargetCount">
            
             \brief Minimum target (count)
            
        </member>
        <member name="P:AskiaCore.IQuota.MaximumTargetCount">
            
             \brief Maximum target (count)
            
        </member>
        <member name="P:AskiaCore.IQuota.MaximumTargetPercentage">
            
             \brief Maximum target (percentage)
            
        </member>
        <member name="M:AskiaCore.IQuota.SetMaximumTargetEmpty">
            
             \brief Set empty maximum target 
            
        </member>
        <member name="M:AskiaCore.IQuota.GetMaximumTargetType">
            
             \brief Indicates the maximum target type
            
        </member>
        <member name="P:AskiaCore.IQuota.InterviewsCompletedCount">
            
             \brief Count completed interview
            
        </member>
        <member name="P:AskiaCore.IQuota.InterviewsIncompletedCount">
            
             \brief Count incompleted interviews
            
        </member>
        <member name="P:AskiaCore.IQuota.AppointmentsInQuotaCount">
            
             \brief Count interviews with appointments in quota
            
        </member>
        <member name="P:AskiaCore.IQuota.AppointmentsCount">
            
             \brief Count interviews with appointments
            
        </member>
        <member name="P:AskiaCore.IQuota.InterviewsRunningCount">
            
             \brief Count running interviews
            
        </member>
        <member name="P:AskiaCore.IQuota.InterviewsObservedCount">
            
             \brief Count observed interviews (=interviews counted in target)
            
        </member>
        <member name="P:AskiaCore.IQuota.AvailableContactsCount">
            
             \brief Count available contacts
            
        </member>
        <member name="P:AskiaCore.IQuota.AvailableContactsForTelephonyCount">
            
             \brief Count available contacts for telephony
            
        </member>
        <member name="P:AskiaCore.IQuota.AvailableContactsForWebCount">
            
             \brief Count available contacts for web (email)
            
        </member>
        <member name="P:AskiaCore.IQuota.MinimumToDoCount">
            
             \brief Number of interviews to do to reach minimum target
            
        </member>
        <member name="P:AskiaCore.IQuota.MaximumToDoCount">
            
             \brief Number of interviews to do to reach minimum target
            
        </member>
        <member name="P:AskiaCore.IQuota.Questions">
            
             \brief Questions on the root level of the quota tree
            
        </member>
        <member name="M:AskiaCore.IQuota.Update(AskiaCore.QuotaUpdateType,System.Byte[],System.Collections.Generic.ICollection{System.Int32})">
            
             \brief Process quota update
            
        </member>
        <member name="M:AskiaCore.IQuota.GetUpdate(AskiaCore.QuotaUpdateType@,System.Byte[]@,System.Boolean)">
            
             \brief Get quota updates
            
        </member>
        <member name="M:AskiaCore.IQuota.UpdateCountsAndPercentages">
            
             \brief Recalculate counts &amp; percentages
            
        </member>
        <member name="M:AskiaCore.IQuota.EqualsTree(AskiaCore.IQuota)">
            
             \brief Compare quota tree structure (ignoring settings, version, shortcuts, tokens, etc)
            
        </member>
        <member name="M:AskiaCore.IQuota.QuotaVerify(System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.ICollection{AskiaCore.IQuotaIssue}}@)">
            
             \brief Verify the quota structure for sanity issues
            
        </member>
        <member name="T:AskiaCore.QuotaFactory">
            
             \brief %Quota factory
            
        </member>
        <member name="M:AskiaCore.QuotaFactory.Create">
            
             \brief Create new Quota object
            
        </member>
        <member name="T:AskiaCore.IQuotaAllocation">
            
             \brief %IQuotaAllocation interface
            
        </member>
        <member name="P:AskiaCore.IQuotaAllocation.MinimumTargetCount">
            
             \brief Minimum target (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAllocation.MinimumTargetPercentage">
            
             \brief Minimum target (percentage)
            
        </member>
        <member name="M:AskiaCore.IQuotaAllocation.IsMinimumTargetPercentage">
            
             \brief Indicates if the minimum target type is in %
            
        </member>
        <member name="P:AskiaCore.IQuotaAllocation.MaximumTargetCount">
            
             \brief Maximum target (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAllocation.MaximumTargetPercentage">
            
             \brief Maximum target (percentage)
            
        </member>
        <member name="M:AskiaCore.IQuotaAllocation.IsMaximumTargetPercentage">
            
             \brief Indicates if the maximum target type is in %
            
        </member>
        <member name="T:AskiaCore.IQuotaAllocationCollection">
            
             \brief %IQuotaAllocation collection
            
        </member>
        <member name="M:AskiaCore.IQuotaAllocationCollection.Create(System.Int32)">
            
             \brief Add a new QuotaAllocation to the collection
            
        </member>
        <member name="T:AskiaCore.IQuotaAllocationIterator">
            
             \brief %IQuotaAllocation iterator
            
        </member>
        <member name="T:AskiaCore.IQuotaAvailability">
            
             \brief %IQuotaAvailability interface
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailability.Available">
            
             \brief Available (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailability.AvailableNow">
            
             \brief AvailableNow (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailability.OverCallback">
            
             \brief Over Callback (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailability.OtherNotAvailable">
            
             \brief Not available, and not over callback (count)
            
        </member>
        <member name="T:AskiaCore.IQuotaAvailabilityCollection">
            
             \brief %IQuotaAvailability collection
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityCollection.Count">
            
             \brief Number of IQuotaAvailability in the collection
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityCollection.Item(System.Int32)">
            
             \brief Find an IQuotaAvailability by token
            
        </member>
        <member name="T:AskiaCore.IQuotaAvailabilityDetails">
            
             \brief %IQuotaAvailabilityDetails interface
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.Token">
            
             \brief Token
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalAvailable">
            
             \brief Total Available (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalAvailableNow">
            
             \brief Total AvailableNow (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalOverCallback">
            
             \brief Total Over Callback (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalQuotaReached">
            
             \brief Total quota reached (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalOnDNCList">
            
             \brief Total on do-not-contact list (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalInvalid">
            
             \brief Total phone/email invalid (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalPriority0">
            
             \brief Total user priority = 0 (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalInUse">
            
             \brief Total selecting/mailing/broadcasting (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalDifferentMode">
            
             \brief Total not available for requested mode (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalFiltered">
            
             \brief Total blocked by interview filter (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.TotalOverMaxCalls">
            
             \brief Total over max calls
            
        </member>
        <member name="P:AskiaCore.IQuotaAvailabilityDetails.Availability">
            
             \brief Array of IQuotaAvailability (array)
            
        </member>
        <member name="T:AskiaCore.IQuotaAvailabilityDetailsCollection">
            
             \brief %IQuotaQuestion collection
            
        </member>
        <member name="M:AskiaCore.IQuotaAvailabilityDetailsCollection.Add(AskiaCore.IQuotaAvailabilityDetails)">
            
             \brief Add a new QuotaAvailabilityDetails to the collection
            
        </member>
        <member name="T:AskiaCore.IQuotaAvailabilityDetailsIterator">
            
             \brief %QuotaAvailabilityDetails iterator
            
        </member>
        <member name="T:AskiaCore.QuotaAvailabilityFactory">
            
             \brief %Quota Availability factory
            
        </member>
        <member name="M:AskiaCore.QuotaAvailabilityFactory.Create">
            
             \brief Create new Quota Availability object
            
        </member>
        <member name="T:AskiaCore.IQuotaIssue">
            
             \brief %IQuotaIssue interface
            
        </member>
        <member name="P:AskiaCore.IQuotaIssue.Type">
            
             \brief Issue code
            
        </member>
        <member name="P:AskiaCore.IQuotaIssue.Details">
            
             \brief Extra data, meaning depends on the issue code
            
        </member>
        <member name="T:AskiaCore.IQuotaNode">
            
             \brief %IQuotaNode interface
            
        </member>
        <member name="P:AskiaCore.IQuotaNode.Root">
            
             \brief Main quota object
            
        </member>
        <member name="P:AskiaCore.IQuotaNode.Token">
            
             \brief Token of the node
            
        </member>
        <member name="P:AskiaCore.IQuotaNode.Parent">
            
             \brief Parent node
            
        </member>
        <member name="P:AskiaCore.IQuotaNode.LineState">
            
             \brief Quota Line state
            
        </member>
        <member name="M:AskiaCore.IQuotaNode.GetLineStateSummarized(AskiaCore.QuotaAvailableType,System.Boolean)">
            
             \brief Quota Line state summarized
            
        </member>
        <member name="P:AskiaCore.IQuotaNode.AllocatedForWeb">
            
             \brief Quota allocations for web brokers
            
        </member>
        <member name="P:AskiaCore.IQuotaNode.AllocatedForFace">
            
             \brief Quota allocations for face agents
            
        </member>
        <member name="M:AskiaCore.IQuotaNode.FindNode(System.Int32,System.Boolean)">
            
             \brief Find a node by token below this one
            
        </member>
        <member name="T:AskiaCore.IQuotaQuestion">
            
             \brief %IQuotaQuestion interface
            
        </member>
        <member name="P:AskiaCore.IQuotaQuestion.QuestionId">
            
             \brief ID of question in survey
            
        </member>
        <member name="P:AskiaCore.IQuotaQuestion.QuestionType">
            
             \brief Type of question in survey
            
        </member>
        <member name="P:AskiaCore.IQuotaQuestion.QuestionShortcut">
            
             \brief Shortcut of question in survey
            
        </member>
        <member name="P:AskiaCore.IQuotaQuestion.QuestionImport">
            
             \brief Import of question in survey
            
        </member>
        <member name="P:AskiaCore.IQuotaQuestion.QuestionImportationType">
            
             \brief Import of question in survey
            
        </member>
        <member name="P:AskiaCore.IQuotaQuestion.Responses">
            
             \brief Responses in this quota question
            
        </member>
        <member name="M:AskiaCore.IQuotaQuestion.CreateResponseNumeric(System.Int32,System.Double,System.Double)">
            
             \brief Add a numeric response to this quota question given the %param name="dRangeMin" and %param name="dRangeMax" for the new range
            
        </member>
        <member name="M:AskiaCore.IQuotaQuestion.RemoveResponseNumeric(System.Int32)">
            
             \brief Remove numeric response with token %param name="lToken" from this quota question
            
        </member>
        <member name="M:AskiaCore.IQuotaQuestion.CreateResponseGroup(System.String)">
            
             \brief Add a group to this QuotaQuestion
            
        </member>
        <member name="M:AskiaCore.IQuotaQuestion.RemoveResponseGroup(System.Int32)">
            
             \brief Remove group with token %param name="lToken" from this quota question 
            
        </member>
        <member name="M:AskiaCore.IQuotaQuestion.MoveResponse(System.Int32,System.Int32)">
            
             \brief Move response with token %param name="sourceToken" from this quota question to  %param name="targetToken". When succesfull, returns new token 
            
        </member>
        <member name="T:AskiaCore.IQuotaQuestionCollection">
            
             \brief %IQuotaQuestion collection
            
        </member>
        <member name="P:AskiaCore.IQuotaQuestionCollection.Item(System.Int32)">
            
             \brief Find an IQuotaQuestion by token
            
        </member>
        <member name="M:AskiaCore.IQuotaQuestionCollection.Create(System.Int32)">
            
             \brief Add a new QuotaQuestion to the collection
                    Note that this will create a QuotaResponse for all responses as well
            
        </member>
        <member name="T:AskiaCore.IQuotaQuestionIterator">
            
             \brief %IQuotaQuestion iterator
            
        </member>
        <member name="T:AskiaCore.IQuotaResponse">
            
             \brief %IQuotaResponse interface
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.ResponseId">
            
             \brief ID of response in survey
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.ResponseShortCaption">
            
             \brief short caption of response in survey (in the default language)
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.MinimumTargetCount">
            
             \brief Minimum target (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.MinimumTargetPercentage">
            
             \brief Minimum target (percentage)
            
        </member>
        <member name="M:AskiaCore.IQuotaResponse.SetMinimumTargetEmpty">
            
             \brief Set empty minimum target 
            
        </member>
        <member name="M:AskiaCore.IQuotaResponse.GetMinimumTargetType">
            
             \brief Indicates the minimum target type
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.MaximumTargetCount">
            
             \brief Maximum target (count)
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.MaximumTargetPercentage">
            
             \brief Maximum target (percentage)
            
        </member>
        <member name="M:AskiaCore.IQuotaResponse.SetMaximumTargetEmpty">
            
             \brief Set empty maximum target 
            
        </member>
        <member name="M:AskiaCore.IQuotaResponse.GetMaximumTargetType">
            
             \brief Indicates the maximum target type
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.Priority">
            
             \brief
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.AllowOverQuotaType">
            
             \brief
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.InterviewsCompletedCount">
            
             \brief Count completed interview
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.InterviewsIncompletedCount">
            
             \brief Count incompleted interviews
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.AppointmentsInQuotaCount">
            
             \brief Count interviews with appointments in quota
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.AppointmentsCount">
            
             \brief Count interviews with appointments
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.InterviewsRunningCount">
            
             \brief Count running interviews
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.InterviewsObservedCount">
            
             \brief Count observed interviews (=interviews counted in target)
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.AvailableContactsCount">
            
             \brief Count available contacts
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.AvailableContactsForTelephonyCount">
            
             \brief Count available contacts for telephony
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.AvailableContactsForWebCount">
            
             \brief Count available contacts for web (email)
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.MinimumToDoCount">
            
             \brief Number of interviews to do to reach minimum target
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.MaximumToDoCount">
            
             \brief Number of interviews to do to reach minimum target
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.MissingContacts">
            
             \brief Number of contacts missing to reach the minimum target
            
        </member>
        <member name="P:AskiaCore.IQuotaResponse.Questions">
            
             \brief Questions on the root level of the quota tree
            
        </member>
        <member name="T:AskiaCore.IQuotaResponseCollection">
            
             \brief %IQuotaResponse collection
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.Item(System.Int32)">
            
             \brief Find an IQuotaResponse by token
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.TotalMinimumCount">
            
             \brief
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.TotalMinimumPercentage">
            
             \brief
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.TotalMaximumCount">
            
             \brief
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.TotalMaximumPercentage">
            
             \brief
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.InterviewsCompletedCount">
            
             \brief Count completed interview
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.InterviewsIncompletedCount">
            
             \brief Count incompleted interviews
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.AppointmentsInQuotaCount">
            
             \brief Count interviews with appointments in quota
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.AppointmentsCount">
            
             \brief Count interviews with appointments
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.InterviewsRunningCount">
            
             \brief Count running interviews
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.InterviewsObservedCount">
            
             \brief Count observed interviews (=interviews counted in target)
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.AvailableContactsCount">
            
             \brief Count available contacts
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.AvailableContactsForTelephonyCount">
            
             \brief Count available contacts for telephony
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.AvailableContactsForWebCount">
            
             \brief Count available contacts for web (email)
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.MinimumToDoCount">
            
             \brief Number of interviews to do to reach minimum target
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.MaximumToDoCount">
            
             \brief Number of interviews to do to reach minimum target
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseCollection.MissingContacts">
            
             \brief Number of contacts missing to reach the minimum target
            
        </member>
        <member name="T:AskiaCore.IQuotaResponseIterator">
            
             \brief %IQuotaResponse iterator
            
        </member>
        <member name="T:AskiaCore.IQuotaResponseGroup">
            
             \brief %IQuotaResponseGroup interface
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseGroup.Name">
            
             \brief Group name
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseGroup.Responses">
            
             \brief responses collection for this group
            
        </member>
        <member name="T:AskiaCore.IQuotaResponseNumeric">
            
             \brief %IQuotaResponseNumeric interface
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseNumeric.RangeMin">
            
             \brief Range Minimum
            
        </member>
        <member name="P:AskiaCore.IQuotaResponseNumeric.RangeMax">
            
             \brief Range Maximum
            
        </member>
        <member name="T:AskiaCore.IRecordEntity">
            <summary>
                Represents an entity with a corresponding database entry
            </summary>
        </member>
        <member name="P:AskiaCore.IRecordEntity.Id">
            <summary>
            Id of the record
            </summary>
        </member>
        <member name="P:AskiaCore.IRecordEntity.CreatedBy">
            <summary>
            Id of the user which created the record
            </summary>
        </member>
        <member name="P:AskiaCore.IRecordEntity.CreatedAt">
            <summary>
            DateTime the record was created at
            </summary>
        </member>
        <member name="P:AskiaCore.IRecordEntity.UpdatedBy">
            <summary>
            Id of the user which last updated the record
            </summary>
        </member>
        <member name="P:AskiaCore.IRecordEntity.UpdatedAt">
            <summary>
            DateTime at which the record was last updated
            </summary>
        </member>
        <member name="M:AskiaCore.IRecordEntity.IsDeleted">
            <summary>
            Indicates if the record is flagged as deleted
            </summary>
            <remarks><strong>TODO::Change to property instead of method</strong></remarks>
            <returns>A boolean indicating if the record is flagged as deleted</returns>
        </member>
        <member name="P:AskiaCore.IRecordEntity.DeletedBy">
            <summary>
            Id of the user which last deleted the record
            </summary>
        </member>
        <member name="P:AskiaCore.IRecordEntity.DeletedAt">
            <summary>
            DateTime at which the record was last deleted
            </summary>
        </member>
        <member name="M:AskiaCore.IRecordEntity.IsLoaded">
            <summary>
            Checks if the record is successfully loaded from the database
            </summary>
            <returns>
                Return true when the record was successfully loaded, otherwise return false.
                In such case refer to the <see cref="P:AskiaCore.IRecordEntity.LastError"/> property.
            </returns>
        </member>
        <member name="M:AskiaCore.IRecordEntity.Save">
            <summary>
            Saves the record in the database
            </summary>
            <returns>
                Return true when the record was successfully saved, otherwise return false.
                In such case refer to the <see cref="P:AskiaCore.IRecordEntity.LastError"/> property.
            </returns>
        </member>
        <member name="M:AskiaCore.IRecordEntity.Reload">
            <summary>
            Reloads the record
            </summary>
            <returns>
                Return true when the record was successfully reloaded, otherwise return false.
                In such case refer to the <see cref="P:AskiaCore.IRecordEntity.LastError"/> property.
            </returns>
        </member>
        <member name="M:AskiaCore.IRecordEntity.Delete">
            <summary>
            Deletes the record in the database
            </summary>
            <returns>
                Return true when the record was successfully deleted, otherwise return false.
                In such case refer to the <see cref="P:AskiaCore.IRecordEntity.LastError"/> property.
            </returns>
            <remarks>
                The record is not really deleted rather it is marked as deleted with a flag.
            </remarks>
        </member>
        <member name="M:AskiaCore.IRecordEntity.Restore">
            <summary>
            Restores the deleted record in the database
            </summary>
            <remarks>
                This method unset the <i>deleted</i> flag on the current record
            </remarks>
            <returns>
                Return true when the record was successfully restored, otherwise return false.
                In such case refer to the <see cref="P:AskiaCore.IRecordEntity.LastError"/> property.
            </returns>
        </member>
        <member name="P:AskiaCore.IRecordEntity.LastError">
            <summary>
            Last error that occurred
            </summary>
        </member>
        <member name="T:AskiaCore.IRecordEntitiesOwner`1">
            <summary>
            Generic interface for record collections with ownership
            </summary>
            <remarks>
            <strong>TODO::Maybe change the name of to IRecordEntityCollection and use a method GetById() instead of the brackets accessor</strong>
            </remarks>
            <typeparam name="TEntityType">Type of record in the collection</typeparam>
        </member>
        <member name="M:AskiaCore.IRecordEntitiesOwner`1.Create">
            <summary>
            Creates a new element
            </summary>
            <returns>Returns the created entity</returns>
        </member>
        <member name="P:AskiaCore.IRecordEntitiesOwner`1.Item(System.Int32)">
            <summary>
            Finds a record entity by id
            </summary>
            <param name="id">Id of the record entity to find</param>
            <returns>Return the record entity with the specified id or null when not found</returns>
        </member>
        <member name="T:AskiaCore.ResourceType">
            <summary>
            Enumeration of the resource type
            </summary>
        </member>
        <member name="F:AskiaCore.ResourceType.Image">
            <summary>
            The resource is an image
            </summary>
        </member>
        <member name="F:AskiaCore.ResourceType.Sound">
            <summary>
            The resource is a sound
            </summary>
        </member>
        <member name="F:AskiaCore.ResourceType.Animation">
            <summary>
            The resource is an animation
            </summary>
        </member>
        <member name="F:AskiaCore.ResourceType.Object">
            <summary>
            The resource is a flash object
            </summary>
        </member>
        <member name="F:AskiaCore.ResourceType.Misc">
            <summary>
            Miscellaneous resource
            </summary>
        </member>
        <member name="T:AskiaCore.IResource">
            <summary>
            Resource interface
            </summary>
        </member>
        <member name="P:AskiaCore.IResource.Name">
            <summary>
            Name of the resource
            </summary>
        </member>
        <member name="P:AskiaCore.IResource.Type">
            <summary>
            Type of the resource
            </summary>
        </member>
        <member name="P:AskiaCore.IResource.TranslatedFiles">
            <summary>
            Collection of the resource files by language
            </summary>
        </member>
        <member name="M:AskiaCore.IResource.Extract(System.String)">
            <summary>
            Extract the resource to the disk
            </summary>
            <param name="directory">Directory where the resource will be extracted</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IResource.GetScenarios">
            <summary>
            Retrieve a list the scenarios containing this resource
            </summary>
            <returns>Returns a collection of id of the scenario for this resource</returns>
        </member>
        <member name="M:AskiaCore.IResource.AddToScenario(System.Int32)">
            <summary>
            Add the resource to a given scenario
            </summary>
            <param name="scenarioId">Ids of the scenario to which the resource will be added</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IResource.RemoveFromScenario(System.Int32)">
            <summary>
            Remove the resource from a given scenario
            </summary>
            <param name="scenarioId">Ids of the scenario from which the resource will be removed</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IResourceCollection">
            <summary>
            Collection of resources
            </summary>
        </member>
        <member name="P:AskiaCore.IResourceCollection.Count">
            <summary>
            Number of resources in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IResourceCollection.Item(System.Int32)">
            <summary>
            Find a resource by id
            </summary>
            <param name="id">Id of the resource to find</param>
        </member>
        <member name="P:AskiaCore.IResourceCollection.Item(System.String)">
            <summary>
            Find a resource by name
            </summary>
            <param name="name">Name of the resource to find</param>
        </member>
        <member name="M:AskiaCore.IResourceCollection.Create(System.String)">
            <summary>
            Creates a new resource in the collection given its name
            </summary>
            <param name="name">Name of the resource to create</param>
            <returns>Returns the newly created resource</returns>
        </member>
        <member name="M:AskiaCore.IResourceCollection.Remove(System.Int32)">
            <summary>
            Remove a resource from the collection given its id
            </summary>
            <param name="id">Id of the resource to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IResourceCollection.Remove(System.String)">
            <summary>
            Remove a resource from the collection given its name
            </summary>
            <param name="name">Name of the resource to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IResourceIterator">
            <summary>
            Resource collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.IResourceFile">
            <summary>
            Resource file interface
            </summary>
        </member>
        <member name="P:AskiaCore.IResourceFile.IsExternal">
            <summary>
            Indicates if the resource is external
            </summary>
        </member>
        <member name="P:AskiaCore.IResourceFile.FileLocation">
            <summary>
            Location of the file
            </summary>
        </member>
        <member name="P:AskiaCore.IResourceFile.Data">
            <summary>
            Data contained within the file
            </summary>
        </member>
        <member name="T:AskiaCore.IResourceFileCollection">
            <summary>
            Resource file collection
            </summary>
        </member>
        <member name="P:AskiaCore.IResourceFileCollection.Count">
            <summary>
            Number of resource files in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IResourceFileCollection.Item(System.Int32)">
            <summary>
            Find a resource file by language id
            </summary>
            <param name="languageId">Id of the language of the resource to find</param>
        </member>
        <member name="M:AskiaCore.IResourceFileCollection.Create(System.Int32)">
            <summary>
            Create a resource file given its language id
            </summary>
            <param name="languageId">Id of the language of the resource to create</param>
            <returns>Returns the newly created resource file</returns>
        </member>
        <member name="M:AskiaCore.IResourceFileCollection.Remove(System.Int32)">
            <summary>
            Removes a resource file given its language id
            </summary>
            <param name="languageId">Id of the language of the resource to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IResourceFileIterator">
            <summary>
            Resource file collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.ResponseType">
            <summary>
            Enumeration of the response type
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseType.Default">
            <summary>
            Standard response
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseType.Header">
            <summary>
            Header response used to group other responses
            </summary>
        </member>
        <member name="T:AskiaCore.ResponseBaseType">
            <summary>
            Enumeration of the response base type
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseBaseType.Normal">
            <summary>
            Standard base response type
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseBaseType.NoResponse">
            <summary>
            Response representing an unanswered question
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseBaseType.NotAsked">
            <summary>
            Response representing a question non asked
            </summary>
        </member>
        <member name="T:AskiaCore.ResponseRotationBehaviour">
            <summary>
            Enumeration of the response rotation behavior
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseRotationBehaviour.Authorised">
            <summary>
            Rotation is allowed
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseRotationBehaviour.Fixed">
            <summary>
            No rotation allowed
            </summary>
        </member>
        <member name="F:AskiaCore.ResponseRotationBehaviour.AlwaysFollowPrevious">
            <summary>
            The response will always follow the original previous response
            </summary>
        </member>
        <member name="T:AskiaCore.IResponse">
            <summary>
            Response interface
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.QuestionId">
            <summary>
            Id of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.ParentId">
            <summary>
            Id of the parent response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.Position">
            <summary>
            Position of the response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.PrevSibling">
            <summary>
            Previous sibling response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.NextSibling">
            <summary>
            Next sibling response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.FirstChild">
            <summary>
            First child response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.LastChild">
            <summary>
            Last child response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.Type">
            <summary>
            Type of the question
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.BaseType">
            <summary>
            Base type of the response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.RotationBehaviour">
            <summary>
            Rotation behavior of the response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.EntryCode">
            <summary>
            Entry code of the response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.Factor">
            <summary>
            Factor of the response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.IsExclusive">
            <summary>
            Indicates if the response is exclusive
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.IsSelectable">
            <summary>
            Indicates if the response is selectable
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.IsExcludedFromTranslation">
            <summary>
            Indicates if the response is excluded from translation
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.ResourceId">
            <summary>
            Id of the resource used by the response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.SemiOpenQuestionId">
            <summary>
            Id of the semi=open question for the response
            </summary>
        </member>
        <member name="P:AskiaCore.IResponse.UserData">
            <summary>
            User data for the response
            </summary>
        </member>
        <member name="M:AskiaCore.IResponse.GetMainCaption">
            <summary>
            Retrieves the main caption of the response
            </summary>
            <remarks>
            Uses the current language in the survey's context
            </remarks>
            <returns>Returns the main caption of the response</returns>
        </member>
        <member name="M:AskiaCore.IResponse.SetMainCaption(System.String)">
            <summary>
            Sets the main caption of the response
            </summary>
            <remarks>
            Uses the current language in the survey's context
            </remarks>
            <param name="caption">Value of the caption to set</param>
        </member>
        <member name="M:AskiaCore.IResponse.GetMainCaptions">
            <summary>
            Retrieve main captions for all languages in the survey.
            </summary>
        </member>
        <member name="M:AskiaCore.IResponse.SetMainCaptions(System.Collections.Generic.IDictionary{System.Int32,System.String})">
            <summary>
            Set main captions for languages in the survey.
            </summary>
        </member>
        <member name="M:AskiaCore.IResponse.GetScenarios">
            <summary>
            Retrieve a list the scenarios containing this response
            </summary>
            <returns>Returns a collection of id of the scenario for this response</returns>
        </member>
        <member name="M:AskiaCore.IResponse.AddToScenario(System.Int32)">
            <summary>
            Add the response to a given scenario
            </summary>
            <param name="scenarioId">Ids of the scenario to which the response will be added</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IResponse.RemoveFromScenario(System.Int32)">
            <summary>
            Remove the resource from a given scenario
            </summary>
            <param name="scenarioId">Ids of the scenario from which the resource will be removed</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IResponseCollection">
            <summary>
            Response collection
            </summary>
        </member>
        <member name="P:AskiaCore.IResponseCollection.Count">
            <summary>
            Number of responses in the collection
            </summary>
        </member>
        <member name="M:AskiaCore.IResponseCollection.Create(System.String)">
            <summary>
            Creates a new response in the collection given its entry code
            </summary>
            <param name="entryCode">Entry code of the response to create</param>
            <returns>Returns the newly created response</returns>
        </member>
        <member name="M:AskiaCore.IResponseCollection.Create(System.Int32,System.String)">
            <summary>
            Creates a new response in the collection given a parent
            and its entry code
            </summary>
            <remarks>
            The response is positioned at the end of its siblings
            </remarks>
            <param name="parentId">Id of the parent response of which the created one will be the child</param>
            <param name="entryCode">Entry code of the response to create</param>
            <returns>Returns the newly created response</returns>
        </member>
        <member name="M:AskiaCore.IResponseCollection.Create(System.Int32,System.Int32)">
            <summary>
             Creates a new response in the collection given a position
            </summary>
            <param name="parentId">Id of the parent response of which the created one will be the child</param>
            <param name="position">The position at which the response will be created</param>
            <returns>Return the newly created response</returns>
        </member>
        <member name="M:AskiaCore.IResponseCollection.Create(System.Int32,System.Int32,System.String)">
            <summary>
             Creates a new response in the collection given a position and a shortcut
            </summary>
            <param name="parentId">Id of the parent response of which the created one will be the child</param>
            <param name="position">The position at which the response will be created</param>
            <param name="entryCode">Entry code of the response to create</param>
            <returns>Return the newly created response</returns>
        </member>
        <member name="M:AskiaCore.IResponseCollection.Remove(System.Int32)">
            <summary>
             Remove a response from the collection given its id
            </summary>
            <param name="id">Id of the response to remove</param>
            <returns>Returns a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IResponseIterator">
            <summary>
             Response collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.IMethodResult">
             <summary>
             Represents the result of a method called
             </summary>
             <example>
                 <para>Create a new survey with one question</para>
                 <code>
                     using AskiaCore;
             
                     namespace MyApp
                     {
                         public class MyProgram
                         {
                             static void Main()
                             {
                                 // Initialize the database connection string (Where the survey will be stored)
                                 Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
            
                                 // Create a new context
                                 IContext context = ContextFactory.Create();
                                 context.UserId = 1;
                                 context.SessionId = "xxxxx-xxxxx-xxxxx-xxxxxx";
                                 context.LanguageId = 2057; // Edit the survey with this language (English)
                               
                                 // Create a new survey
                                 ISurvey survey = SurveyFactory.Create(context);
                                 survey.Name = "MySurvey";
                                 IMethodResult result = survey.SetDefaultLanguageId(2057); // English
                               
                                 if (result.Success)
                                 {
                                     // Create the single closed question gender
                                      IQuestion gender = survey.Questions.Create();
                                      gender.Shortcut = "gender";
                                      gender.MainCaption ="What's your gender?";
                                      gender.Type = QuestionType.Single;
                              
                                      // Save all changes
                                      survey.SaveAll();
                                  }
                         
                                  // Release the database connection
                                  Persistent.EndDatabaseConnection();
                             }
                         }
                     }
                 </code>
             </example>
        </member>
        <member name="P:AskiaCore.IMethodResult.Success">
            <summary>
            Indicates if the method called was successfully executed
            </summary>
        </member>
        <member name="P:AskiaCore.IMethodResult.Error">
            <summary>
            Error that has been generated by the called method, <br/>
            it could be null when the called method succeed (<see cref="P:AskiaCore.IMethodResult.Success"/> is true).
            </summary>
        </member>
        <member name="T:AskiaCore.RoutingConditionType">
            <summary>
            Enumeration of the routing condition type
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingConditionType.Undefined">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingConditionType.Gui">
            <summary>
            Defined with Design 5 graphical user interface
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingConditionType.Advanced">
            <summary>
            Defined using Askia script
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingConditionType.Assisted">
            <summary>
            Defined with Design 6 graphical user interface
            </summary>
        </member>
        <member name="T:AskiaCore.RoutingActionType">
            <summary>
            Enumeration of the routing action type
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.Undefined">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.Skip">
            <summary>
            Specifies part of the questionnaire (a question or chapter) that will not be asked if the routing condition is met.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.Ask">
            <summary>
            Specifically targets parts of the questionnaire which are to be asked only if the specified condition is met.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.Goto">
            <summary>
            Jumps immediately to the specified question. We recommend that you use "Do Not Ask" routing action
            wherever possible to skip sections of the questionnaire. This helps ensure that your questionnaire routing remains easy to understand.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.AbandonInterview">
            <summary>
            Terminates the current interview without saving the data or marking the interview as incomplete
            and records a specific call result code.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.SetValue">
            <summary>
            Records a specific value in the specified variable. Different values can be recorded,
            depending on whether the routing condition evaluates to true or false.
            Can also hide the variables (so it will not be visible to the agent or respondent).
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.ShowMessage">
            <summary>
            Displays a message to the interviewer or respondent.The message can be set to "blocking":
            this means that the respondent will not be able to proceed until the routing instruction's condition is met.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.IgnoreResponses">
            <summary>
            Ignore the specified responses in a particular variable. These responses will not be displayed to the respondent,
            who therefore cannot select them.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.ChangeQuestionOrder">
            <summary>
            Changes the order of questions in the questionnaire for the current respondent
            (so the order in which he or she will answer the questionnaire changes).
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.ChangeResponseOrder">
            <summary>
            Changes the order of the responses in the specified question,
            or the order of loop items within the specified loop, for the current respondent.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.SetLanguage">
            <summary>
            Specifies the language that will be used for the current interview.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.SetScenario">
            <summary>
            Changes the version of the questionnaire used for the current interview.
            The respondent will only be asked questions assigned to that particular version.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.SendEmail">
            <summary>
            Sends an email to a specific destination, with the specified subject line and message text.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.RunSQL">
            <summary>
            Initiates an SQL query. This can be used to store data in an external database.
            You must specify the database’s DSN, and the appropriate SQL query.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.RunProgram">
            <summary>
            Starts the specified external program on the interviewer’s computer (or, for Askiaweb projects, on the respondent’s computer).
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.QueryWebService">
            <summary>
            Sends an HTTP request to a web service
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.StartPredictiveDialing">
            <summary>
            In a CATI project, sends a predictive dialling trigger to the telephony system.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.StartRecording">
            <summary>
            In a CATI project, this begins a recording of the telephone conversation.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.InterruptRecording">
            <summary>
            In a CATI project, this stops any in-progress recording.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingActionType.RunAskiaScript">
            <summary>
            Runs the specified Askiascript 2.0 script. This allows you to carry out multiple actions (e.g. setting or skipping multiple questions) with a single routing instruction.
            There are several keywords that may be particularly useful with this routing type, as they are equivalent to various other routing actions.
            </summary>
        </member>
        <member name="T:AskiaCore.IRoutingActionParameter">
            <summary>
            Routing action parameter Interface
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingActionParameter.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingActionParameter.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:AskiaCore.RoutingTargetType">
            <summary>
            Enumeration of the routing target type
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingTargetType.Question">
            <summary>
            The target is a question
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingTargetType.Response">
            <summary>
            The target is a response
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingTargetType.ResponseNotToAsk">
            <summary>
            The target is a response to ignore
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingTargetType.Language">
            <summary>
            The target is a language
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingTargetType.Scenario">
            <summary>
            The target is a scenario
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingTargetType.Resource">
            <summary>
            The target is a resource
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingTargetType.SurveyMilestone">
            <summary>
            The target is a milestone of the survey.
            </summary>
        </member>
        <member name="T:AskiaCore.SurveyMilestoneType">
            <summary>
            Enumeration of the possible values of the RoutingTargetType 'SurveyMilestone'
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMilestoneType.End">
            <summary>
            Implicit variable marking the end of an interview
            </summary>
        </member>
        <member name="T:AskiaCore.RoutingStartType">
            <summary>
            Enumeration of the possible ways an interview is triggered (i.e. started).
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingStartType.Question">
            <summary>
            The routing will be triggered relative to a single question being processed.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingStartType.StartInterview">
            <summary>
            The routing will be triggered relative to the beginning of the interview.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingStartType.AllQuestions">
            <summary>
            The routing will be triggered relative to all of the questions being processed.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingStartType.RestartInterview">
            <summary>
            The routing will be triggered relative to the restart of the interview.
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingStartType.EndInterview">
            <summary>
            The routing will be triggered relative to the end of the interview.
            </summary>
        </member>
        <member name="T:AskiaCore.IRoutingTarget">
            <summary>
            Routing target interface
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingTarget.Type">
            <summary>
            Type of the target
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingTarget.Id">
            <summary>
            Id of the target
            </summary>
        </member>
        <member name="T:AskiaCore.IRoutingTargetCollection">
            <summary>
            Collection of the routing targets
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingTargetCollection.Count">
            <summary>
            Number of routing targets in the collection
            </summary>
        </member>
        <member name="M:AskiaCore.IRoutingTargetCollection.Create(AskiaCore.RoutingTargetType,System.Int32)">
            <summary>
             Creates a routing target given its type
            </summary>
            <param name="type">Type of the routing target to create</param>
            <param name="targetId">Id of the entity to target</param>
            <returns>Return the newly created routing target</returns>
        </member>
        <member name="M:AskiaCore.IRoutingTargetCollection.Remove(AskiaCore.RoutingTargetType,System.Int32)">
            <summary>
             Remove a routing target from the collection given its id
            </summary>
            <param name="type">Type of the routing target to remove</param>
            <param name="targetId">Id of the routing target to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IRoutingTargetCollection.RemoveAll">
            <summary>
             Remove all routing targets
            </summary>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IRoutingTargetIterator">
            <summary>
             Routing targets collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.RoutingCaptionType">
            <summary>
             Enumeration of the routing caption type
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingCaptionType.Message">
            <summary>
             Message to display for a show message routing
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingCaptionType.MailFrom">
            <summary>
             Sender addresses for a mail routing
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingCaptionType.MailTo">
            <summary>
             Receiver addresses for a mail routing
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingCaptionType.MailBcc">
            <summary>
             Copied receiver addresses for a mail routing
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingCaptionType.MailSubject">
            <summary>
             Subject of the mail for a mail routing
            </summary>
        </member>
        <member name="F:AskiaCore.RoutingCaptionType.MailMessage">
            <summary>
             Main text content of a the mail sent by a mail routing
            </summary>
        </member>
        <member name="T:AskiaCore.IRoutingCaption">
            <summary>
             Routing caption Interface
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingCaption.Type">
            <summary>
             Type of the routing caption
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingCaption.Value">
            <summary>
             Value of the routing caption
            </summary>
        </member>
        <member name="T:AskiaCore.IRouting">
            <summary>
             Routing Interface
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.Name">
            <summary>
            Name of the routing
            </summary>
        </member>
        <member name="M:AskiaCore.IRouting.SetName(System.String)">
            <summary>
            Setter for the name of the routing.
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.StartQuestionId">
            <summary>
            Id of the question starting the routing
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.StartType">
            <summary>
            How the routing is triggered in an interview.
            </summary>
            <remarks>No setter. Use <see cref="M:AskiaCore.ISurvey.MoveRoutings(System.Collections.Generic.IEnumerable{System.Int32},AskiaCore.RoutingStartType,System.Int32,System.Int32)"/>. This is because routings are grouped by their
            start type. Changing the start type, e.g. from <see cref="F:AskiaCore.RoutingStartType.Question"/> to <see cref="F:AskiaCore.RoutingStartType.StartInterview"/> moves
            the routing into a different group.</remarks>
        </member>
        <member name="P:AskiaCore.IRouting.Position">
            <summary>
            Position of the routing. Starts at zero.
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.ConditionType">
            <summary>
            Condition type of the routing
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.Condition">
            <summary>
            The condition of the routing
            </summary>
        </member>
        <member name="M:AskiaCore.IRouting.SetCondition(System.String)">
            <summary>
            Sets the condition of the routing.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="P:AskiaCore.IRouting.ActionType">
            <summary>
            Action type of the routing
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.IsRunIfNotAsked">
            <summary>
            Indicates if the routing is run if the associated question is not asked
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.IsBefore">
            <summary>
            Indicates if the routing is run before the question
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.IsDuring">
            <summary>
            Indicates if the routing is run during the question
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.IsAfter">
            <summary>
            Indicates if the routing is run after the question
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.IsEdits">
            <summary>
            Indicates if the routing is run during edits
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.IsOnError">
            <summary>
            Indicates if the routing is triggered by an error
            </summary>
        </member>
        <member name="M:AskiaCore.IRouting.GetScenarios">
            <summary>
            Retrieve a list the scenarios containing this routing
            </summary>
            <returns>Returns a collection of id of the scenario for this routing</returns>
        </member>
        <member name="M:AskiaCore.IRouting.AddToScenario(System.Int32)">
            <summary>
             Add the routing to a given scenario
            </summary>
            <param name="scenarioId">Id of the scenario to which the routing will be added</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IRouting.RemoveFromScenario(System.Int32)">
            <summary>
             Removes the routing from a given scenario
            </summary>
            <param name="scenarioId">Id of the scenario from which the routing will be removed</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="P:AskiaCore.IRouting.ActionParameters">
            <summary>
            Collection of the routing action parameters associated to this routing
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.Targets">
            <summary>
            Collection of the routing targets associated to this routing
            </summary>
        </member>
        <member name="P:AskiaCore.IRouting.Captions">
            <summary>
            Collection of the routing captions associated to this routing
            </summary>
        </member>
        <member name="M:AskiaCore.IRouting.Compile">
            <summary>
            Compiles the routing
            </summary>
            <remarks>
            Compiling a routing is mainly validating the Askia script in its condition
            </remarks>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IRouting.CompileEx">
            <summary>
            Compiles the routing
            </summary>
            <remarks>
            Compiling a routing is mainly validating the Askia script in its condition
            </remarks>
            <returns>Return the result of the operation</returns>
        </member>
        <member name="T:AskiaCore.IRoutingCollection">
            <summary>
             Collection of routings
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingCollection.Count">
            <summary>
             Number of routings in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IRoutingCollection.Item(System.String)">
            <summary>
             Find a routing by name
            </summary>
            <param name="name">Name of the routing to find</param>
        </member>
        <member name="M:AskiaCore.IRoutingCollection.Create(System.String)">
            <summary>
            Creates a new routing in the collection given its name
            </summary>
            <param name="name">Name of the routing to create</param>
            <returns>Returns the newly created routing</returns>
        </member>
        <member name="M:AskiaCore.IRoutingCollection.Create(System.String,AskiaCore.RoutingStartType,System.Int32)">
            <summary>
            Creates a new routing in the collection given its name, start type and starting question ID
            </summary>
            <param name="name">Name of the routing to create</param>
            <param name="startType">Start type of the routing (question, end interview, all questions, etc.)</param>
            <param name="startQuestionId">Id of the question from where the routing will start</param>
            <returns>Return the newly created routing</returns>
        </member>
        <member name="M:AskiaCore.IRoutingCollection.Create(System.String,AskiaCore.RoutingStartType,System.Int32,System.Int32)">
            <summary>
            Creates a new routing in the collection given its name, start type, starting question ID and position
            </summary>
            <param name="name">Name of the routing to create</param>
            <param name="startType">Start type of the routing (question, end interview, all questions, etc.)</param>
            <param name="startQuestionId">Id of the question from where the routing will start</param>
            <param name="position">The position at which the routing should be created</param>
            <returns>Return the newly created routing</returns>
        </member>
        <member name="M:AskiaCore.IRoutingCollection.Remove(System.Int32)">
            <summary>
            Remove a routing from the collection given its id
            </summary>
            <param name="id">Id of the routing to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IRoutingCollection.Remove(System.String)">
            <summary>
            Remove a routing from the collection given its name
            </summary>
            <param name="name">Name of the routing to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IRoutingIterator">
            <summary>
            Routing collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.ScenarioEntityType">
            <summary>
            Enumeration of the scenario entity type
            </summary>
        </member>
        <member name="F:AskiaCore.ScenarioEntityType.Question">
            <summary>
            The entity involved by the scenario is a question
            </summary>
        </member>
        <member name="F:AskiaCore.ScenarioEntityType.Response">
            <summary>
            The entity involved by the scenario is a response
            </summary>
        </member>
        <member name="F:AskiaCore.ScenarioEntityType.Routing">
            <summary>
            The entity involved by the scenario is a routing
            </summary>
        </member>
        <member name="F:AskiaCore.ScenarioEntityType.Resource">
            <summary>
            The entity involved by the scenario is a resource
            </summary>
        </member>
        <member name="T:AskiaCore.IScenarioEntity">
            <summary>
            Scenario entity interface
            </summary>
        </member>
        <member name="P:AskiaCore.IScenarioEntity.Type">
            <summary>
            Type of the entity
            </summary>
        </member>
        <member name="P:AskiaCore.IScenarioEntity.Id">
            <summary>
            Id of the entity
            </summary>
        </member>
        <member name="T:AskiaCore.IScenario">
            <summary>
            Scenario interface
            </summary>
        </member>
        <member name="P:AskiaCore.IScenario.Name">
            <summary>
            Name of the scenario
            </summary>
        </member>
        <member name="M:AskiaCore.IScenario.SetName(System.String)">
            <summary>
            Setter for the name of the routing.
            </summary>
        </member>
        <member name="P:AskiaCore.IScenario.Description">
            <summary>
            Description of the scenario
            </summary>
        </member>
        <member name="M:AskiaCore.IScenario.AddEntity(AskiaCore.ScenarioEntityType,System.Int32)">
            <summary>
            Adds an entity to the scenario
            </summary>
            <param name="type">Type of the entity to add</param>
            <param name="id">Id of the entity to add</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IScenario.RemoveEntity(AskiaCore.ScenarioEntityType,System.Int32)">
            <summary>
            Removes an entity from the scenario
            </summary>
            <param name="type">Type of the entity to remove</param>
            <param name="id">Id of the entity to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IScenario.GetEntities">
            <summary>
            Retrieves all the entities involved by the scenario
            </summary>
            <returns>Return a collection of all the entities involved by the scenario</returns>
        </member>
        <member name="T:AskiaCore.IScenarioCollection">
            <summary>
            Collection of scenarios
            </summary>
        </member>
        <member name="P:AskiaCore.IScenarioCollection.Count">
            <summary>
            Number of scenarios in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IScenarioCollection.Item(System.Int32)">
            <summary>
            Find a scenario by id
            </summary>
            <param name="id">Id of the scenario to find</param>
        </member>
        <member name="P:AskiaCore.IScenarioCollection.Item(System.String)">
            <summary>
            Find a scenario by name
            </summary>
            <param name="name">Name of the scenario to find</param>
        </member>
        <member name="M:AskiaCore.IScenarioCollection.Create">
            <summary>
            Creates a new scenario in the collection with a default name
            </summary>
            <returns>Returns the newly created scenario</returns>
        </member>
        <member name="M:AskiaCore.IScenarioCollection.Create(System.String)">
            <summary>
            Creates a new scenario in the collection given its name
            </summary>
            <param name="name">Name of the scenario to create</param>
            <returns>Returns the newly created scenario</returns>
        </member>
        <member name="M:AskiaCore.IScenarioCollection.Create(System.String,System.String)">
            <summary>
            Creates a new scenario in the collection given its name and its description
            </summary>
            <param name="name">Name of the scenario to create</param>
            <param name="description">Description of the scenario to create</param>
            <returns>Returns the newly created scenario</returns>
        </member>
        <member name="M:AskiaCore.IScenarioCollection.Remove(System.Int32)">
            <summary>
            Remove a scenario from the collection given its id
            </summary>
            <param name="id">Id of the scenario to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.IScenarioCollection.Remove(System.String)">
            <summary>
            Remove a scenario from the collection given its name
            </summary>
            <param name="name">Name of the scenario to remove</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="T:AskiaCore.IScenarioIterator">
            <summary>
            Scenario collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.SurveyMessage">
            <summary>
            Enumeration of the survey messages
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.CannotCreateTable">
            <summary>
            Cannot create a database table
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.ResponseExpected">
            <summary>
            A response is expected for question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.OnlyOneResponseRequired">
            <summary>
            You can only give one response for question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.ResponseMustBeNumeric">
            <summary>
            Response to question `%q` must be numeric
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.ResponseMustBeBetween">
            <summary>
            Response to question `%q` must be between %1 and %2
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.ResponseMustBeAbove">
            <summary>
            Response to question `%q` must be above %1
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.ResponseMustBeUnder">
            <summary>
            	Response to question `%q` must be under %1
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.OnlyNResponses">
            <summary>
            You can only give %1 responses to `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.ForbiddenResponse">
            <summary>
            You cannot give response `%1` to question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.SurveyNotLoaded">
            <summary>
            The survey is not loaded
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.IncorrectPassword">
            <summary>
            The password is incorrect
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.Specify">
            <summary>
            Please specify...
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.RankBetweenOneAndN">
            <summary>
            Ranking must be between 1 an %1 for question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.RankMissing">
            <summary>
            Rank %1 is missing for question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.DuplicateRank">
            <summary>
            Rank %1 has been given more than once for question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.OtherSpecify">
            <summary>
            Other (specify)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.DontKnow">
            <summary>
            Don't know
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.SemiOpenResponseRequired">
            <summary>
            You must specify the semi-open response
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.ResponseCannotBeDecimal">
            <summary>
            You must specify the semi-open response
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.NotValidDate">
            <summary>
            Please enter a valid date for question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.NotValidTime">
            <summary>
            Please enter a valid time for question `%q`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.QuotasClosed">
            <summary>
            	The quotas are closed for `%1`
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.Calendar">
            <summary>
            ... (text of date picker button)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyMessage.AtLeastNResponseRequired">
            <summary>
            Please select at least %1 for question `%q`
            </summary>
        </member>
        <member name="T:AskiaCore.SurveyIntegrityErrorType">
            <summary>
            Enumeration of the survey integrity error types
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.Undefined">
            <summary>
            Undefined error
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuotaQuestionDeleted">
            <summary>
            The question within the quota has been deleted
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuotaSubQuestionDeleted">
            <summary>
            The sub-question within the quota has been deleted
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuotaResponseDeleted">
            <summary>
            The response used in the quota has been deleted
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuotaResponseAdded">
            <summary>
            A reponse has been added in the quota question, 
            but no value has been assigned yet
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RevisionHistoryIncompatible">
            <summary>
            The revision of the survey to update is incompatible 
            with the current survey revision
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RevisionHistoryOlderVersion">
            <summary>
            The revision of the survey to update is older 
            than the current survey revision
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ImportedFieldNotNumeric">
            <summary>
            The field from the list file (AskiaField) used by the question importation
            is not numeric
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ImportedFieldNotFound">
            <summary>
            The field from the list file (AskiaField) used by the question importation
            is not found
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoShortcut">
            <summary>
            The question doesn't have a shortcut
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ShortcutAlreadyUsed">
            <summary>
            Duplicate questions shortcut
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LoopWithoutQuestion">
            <summary>
            A question loop requires at least one sub-question
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoVisibleQuestion">
            <summary>
            The survey doesn't have any visible question
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoScreen">
            <summary>
            No screen found in the survey (V5)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoScreenForQuestion">
            <summary>
            No screen found for the question (V5)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuestionChangedType">
            <summary>
            The type of the question has changed
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.IncompatibleLevel">
            <summary>
            The level of the question inside a loop is not compatible
            with the current survey structure
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LastRevisionIncompatible">
            <summary>
            The revision of the survey to update is incompatible 
            with the last revision of the current survey
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.OlderSurveyVersionWillUpgrade">
            <summary>
            The version of the survey is older and will be upgraded
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.UpdateSourceIsOldVersion">
            <summary>
            The update source is an old version
            and the upgrade of the source is required
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuotaQuestionUnavailable">
            <summary>
            The quota question seems not available
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ImportedFieldNotText">
            <summary>
            The field from the list file (AskiaField) used by the question importation
            is not textual
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ImportedFieldNotFoundInProject">
            <summary>
            The field from the AskiaField project used by the question importation
            is not found
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ImportedFieldNotDatetime">
            <summary>
            The field from the list file (AskiaField) used by the question importation
            is not date/time
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.CharsetRoutingUsed">
            <summary>
            The 'Set Charset' routing has been deprecated
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuotaQuestionTypeChanged">
            <summary>
            The type of the question used in the quota has been changed
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuotaQuestionImportChanged">
            <summary>
            The importation of the question used in the quota has been changed
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoQuestion">
            <summary>
            No question
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.InvalidCharactersInShortcut">
            <summary>
            The shortcut of the question contains invalid characters
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ShortcutIsRegistredKeyword">
            <summary>
            The shortcut of the question is a reserved keyword
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LongCaptionMissing">
            <summary>
            The long caption of the question is missing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LinkQuestionMissing">
            <summary>
            The question used in the link is missing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LinkMustBeClosed">
            <summary>
            Link requires a closed question
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LinkMustBeBefore">
            <summary>
            The question used in the link 
            must be defined before the question that uses it
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LevelLinkMustBeALoop">
            <summary>
            The level link must be applied on a loop only
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LevelLinkMustBeOnSameLevel">
            <summary>
            The level link must be applied on loops that are on the same level
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.CircularLink">
            <summary>
            Circular question link reference
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoQuotaInLoop">
            <summary>
            Quota in loop is not allowed
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LoopWithoutVisibleQuestion">
            <summary>
            The loop doesn't have any visible question
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuestionDoesNotSupportQuota">
            <summary>
            The question doesn't support quota
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.MinimumAllowedResponseSuperiorToMaximum">
            <summary>
            The minimum allowed responses is higher than the maximum allowed
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.QuestionTypeNotDefined">
            <summary>
            The type of question is not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.LoopTypeNotDefined">
            <summary>
            The type of the loop is not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoResponseDefined">
            <summary>
            No response defined in the closed question
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ResponseCaptionMissing">
            <summary>
            Missing response caption
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ResponseAlreadyUsed">
            <summary>
            Duplicate response caption
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ResponseMustBeExclusiveForBaseType">
            <summary>
            The response must be exclusive for the specified base type
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.EntryCodeAlreadyUsed">
            <summary>
            Duplicate response entry code
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.MaximumResponseNumberMissing">
            <summary>
            The maximum number of response is invalid (must be higher than 0)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.MinimumResponseNumberSuperiorToMaximum">
            <summary>
            The minimum number of responses is higher than the number of responses
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingStartQuestionUndefined">
            <summary>
            The start question of the routing is not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.NoResponseSelectedForRouting">
            <summary>
            No response selected in the condition of the routing (GUI)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingConditionEmpty">
            <summary>
            The condition of the routing is empty
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.ScriptError">
            <summary>
            Script error
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingConditionMustBeNumberNotArray">
            <summary>
            The condition of the routing must be a number and not an array
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingConditionMustBeNumber">
            <summary>
            The condition of the routing must be a number
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingConditionHasNoType">
            <summary>
            The type of the routing condition is not defined (GUI)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingConditionMissingValue">
            <summary>
            The value of the routing condition is not defined (GUI)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingConditionMinimumSuperiorToMaximum">
            <summary>
            The minimum value of the routing condition is higher than the maximum value (GUI)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingHasNoExecutionTime">
            <summary>
            The execution time (before/during/after...) of the routing is not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingTargetQuestionUndefined">
            <summary>
            The target question of the routing is not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingTargetQuestionNotInLoop">
            <summary>
            The target question of the routing is not within the same loop
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingInvalidInterviewOutputCode">
            <summary>
            The output code of the routing to abandon the interview is invalid
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingMessageMissing">
            <summary>
            The message of the routing is not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingIgnoredResponseUndefined">
            <summary>
            The responses to ignore are not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingCannotSetTargetValue">
            <summary>
            Cannot set the value of the target question (chapter or question within a loop)
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingMissingDsn">
            <summary>
            Missing DSN for the `run SQL Query` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingMissingQuery">
            <summary>
            Missing query for the `run SQL Query` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingMissingProgram">
            <summary>
            Missing program path for the `run program` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingMissingLanguage">
            <summary>
            Missing language for the `set language` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingEmailMissingTo">
            <summary>
            Missing `to` field for the `send email` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingEmailMissingFrom">
            <summary>
            Missing `from` field for the `send email` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingMissingScenario">
            <summary>
            Missing scenario for the `set scenario` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingMissingRecordingFilePrefix">
            <summary>
            Missing file prefix for the `start recording` routing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.RoutingTypeNotDefined">
            <summary>
            The action of the routing is not defined
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.PageNoContainerForQuestion">
            <summary>
            The container element of the question is missing
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorType.PageInvalidNumberOfElementsInContainer">
            <summary>
            Invalid number of elements in the container element
            </summary>
        </member>
        <member name="T:AskiaCore.SurveyIntegrityErrorSeverity">
            <summary>
            Enumeration of the integrity error severity
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorSeverity.Undefined">
            <summary>
            Undefined severity
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorSeverity.Low">
            <summary>
            Low severity, the survey is usable but contains minor errors
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorSeverity.Medium">
            <summary>
            Medium severity, the survey is usable but could generate unexpected behaviours
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorSeverity.High">
            <summary>
            High severity, the survey is usable but could generate interview errors
            </summary>
        </member>
        <member name="F:AskiaCore.SurveyIntegrityErrorSeverity.Critical">
            <summary>
            Critical severity, the survey is not usable
            </summary>
        </member>
        <member name="T:AskiaCore.ScriptErrorType">
            <summary>
            Enumeration of the AskiaScript error types
            </summary>
        </member>
        <member name="F:AskiaCore.ScriptErrorType.None">
            <summary>
            No error
            </summary>
        </member>
        <member name="T:AskiaCore.ISurveyIntegrityError">
            <summary>
            Represents an integrity error within the survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyIntegrityError.Type">
            <summary>
            Type of the error
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyIntegrityError.Severity">
            <summary>
            Severity of the error
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyIntegrityError.ObjectId">
            <summary>
            Id of the object causing the error when available
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyIntegrityError.ObjectName">
            <summary>
            Name of the object causing the error when available
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyIntegrityError.ObjectParentId">
            <summary>
            Id of the parent of the object causing the error when available
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyIntegrityError.ObjectParentName">
            <summary>
            Name of the parent of the object causing the error when available
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyIntegrityError.ScriptError">
            <summary>
            Type of the AskiaScript error when available
            </summary>
        </member>
        <member name="T:AskiaCore.IModifiedEntities">
            <summary>
            Represents an aggregated lists of all entities that have been modified
            </summary>
        </member>
        <member name="P:AskiaCore.IModifiedEntities.Questions">
            <summary>
            Get the list of questions that have been modified
            </summary>
        </member>
        <member name="P:AskiaCore.IModifiedEntities.Elements">
            <summary>
            Get the list of elements that have been modified
            </summary>
        </member>
        <member name="P:AskiaCore.IModifiedEntities.Responses">
            <summary>
            Get the list of responses that have been modified
            </summary>
        </member>
        <member name="P:AskiaCore.IModifiedEntities.Routings">
            <summary>
            Get the list of questions that have been modified
            </summary>
        </member>
        <member name="T:AskiaCore.IStructureModificationResult">
            <summary>
            Represents the result of methods that modified the structure of survey
            </summary>
        </member>
        <member name="P:AskiaCore.IStructureModificationResult.ModifiedEntities">
            <summary>
            Returns the list of entities that has been modified by the called method
            </summary>
        </member>
        <member name="T:AskiaCore.ISurveyResult">
            <summary>
            Represents the result of methods that return a survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyResult.Survey">
            <summary>
            The survey.
            </summary>
        </member>
        <member name="T:AskiaCore.IDefaultControl">
            <summary>
            Represents the default control associated to a question type
            </summary>
        </member>
        <member name="P:AskiaCore.IDefaultControl.QuestionType">
            <summary>
            Type of the question to apply the control on
            </summary>
        </member>
        <member name="P:AskiaCore.IDefaultControl.ControlId">
            <summary>
            Id of the control
            </summary>
        </member>
        <member name="P:AskiaCore.IDefaultControl.Properties">
            <summary>
            Properties for the contrl
            </summary>
        </member>
        <member name="T:AskiaCore.IDefaultControlCollection">
            <summary>
            Collection of the extension (ADX) property
            </summary>
        </member>
        <member name="P:AskiaCore.IDefaultControlCollection.Count">
            <summary>
            Returns the number of properties in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IDefaultControlCollection.Item(AskiaCore.QuestionTypeForDefaultControl)">
            <summary>
            Returns the value associated with the specified property name
            </summary>
            <param name="questionType">Question type to get/set</param>
            <returns>Returns the id of the control or -1 if not found</returns>
        </member>
        <member name="M:AskiaCore.IDefaultControlCollection.Contains(AskiaCore.QuestionTypeForDefaultControl)">
            <summary>
            Indicates if the collection contains the specified property
            </summary>
            <param name="questionType">Question type to search for</param>
            <returns>True when the collection contains the specified property, otherwize false</returns>
        </member>
        <member name="M:AskiaCore.IDefaultControlCollection.Create(AskiaCore.QuestionTypeForDefaultControl,System.Int32)">
            <summary>
            Create a property using the specified name and value
            </summary>
            <remarks>
            If the name of the property already exist, this method override it's value
            </remarks>
            <param name="questionType">Question type to create</param>
            <param name="controlId">Id of the control to set</param>
            <returns>The property that has been created</returns>
        </member>
        <member name="M:AskiaCore.IDefaultControlCollection.Remove(AskiaCore.QuestionTypeForDefaultControl)">
            <summary>
            Remove the specified property from the collection
            </summary>
            <param name="questionType">Question type to remove</param>
            <returns>Returns true if the property was found and removed</returns>
        </member>
        <member name="M:AskiaCore.IDefaultControlCollection.Clear">
            <summary>
            Remove all properties from the collection
            </summary>
        </member>
        <member name="T:AskiaCore.IDefaultControlIterator">
            <summary>
            Iterator over the collection of extension properties
            </summary>
        </member>
        <member name="T:AskiaCore.ISurvey">
             <summary>
             Represents a survey
             </summary>
             <remarks>
                 <para>
                     The survey instance is created for a given context.<br/>
                     You can have multiple instances representing the same survey with different contexts,<br />
                     they all will internally interact with the same reference of the survey data.
                 </para>
                 <para>
                     The concurrent management of survey with context is mostly done to allows edition 
                     by multiple users at the same time on the same survey.
                 </para>
             </remarks>
             <example>
                 <para>Use two different survey instances to manipulate the same survey data</para>
                 <code>
                     using AskiaCore;
             
                     namespace MyApp
                     {
                         public class MyProgram
                         {
                             static void Main()
                             {
                                 // Initialize the database connection string (Where the survey will be stored)
                                 Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
            
                                 // Create a context with the user 1
                                 IContext contextA = ContextFactory.Create();
                                 contextA.UserId = 1;
                                 contextA.SessionId = "xxxxx-xxxxx-xxxxx-xxxxxx";
                                 contextA.LanguageId = 2057; // Edit the survey with this language (English)
                         
                                 // Get the survey with the AskiaPortal id 1
                                 // and with the contextA
                                 ISurvey surveyWithContextA = SurveyFactory.Get(contextA, 1);
                                 IQuestion ageContextA = surveyWithContextA.Questions["age"];
                                 Console.WriteLine(ageContextA.Responses.Count);
                                 // -> Output: 4
                         
                                 // Create a context with the user 2
                                 IContext contextB = ContextFactory.Create();
                                 contextB.UserId = 2;
                                 contextB.SessionId = "yyyyy-yyyyy-yyyyy-yyyyy";
                                 contextB.LanguageId = 1036; // Edit the survey with this language (French)
                         
                                 // Get the survey with the AskiaPortal id 1
                                 // and with the contextB
                                 ISurvey surveyWithContextB = SurveyFactory.Get(contextB, 1);
                                 IQuestion ageContextB = surveyWithContextB.Questions["age"];
                                 IResponse response ageContextB.Responses.Create();
                                 response.MainCaption = "50+";
                         
                                 // Save all changes using the context B
                                 surveyWithContextB.SaveAll();
                         
                                 // The survey with the context A and the survey with the context B
                                 // are both up-to-date with the additional response
                         
                                 Console.WriteLine(ageContextA.Responses.Count);
                                 // -> Output: 5
                                 Console.WriteLine(ageContextB.Responses.Count);
                                 // -> Output: 5
                         
                                 // Release the database connection
                                 Persistent.EndDatabaseConnection();
                             }
                         }
                     }
                 </code>
             </example>
        </member>
        <member name="M:AskiaCore.ISurvey.TransformIntoSurveyTemplate">
            <summary>
            Promotes the current survey to a survey Template
            </summary>
            <returns>Return a survey template</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CopyAsSurveyTemplate">
            <summary>
            Copies the current survey as a survey Template
            </summary>
            <returns>Return a survey template</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.TransformIntoQuestionsTemplate">
            <summary>
            Promotes the current survey to a questions Template
            </summary>
            <returns>Return a questions template</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CopyAsQuestionsTemplate">
            <summary>
            Copies the current survey as a questions Template
            </summary>
            <returns>Return a questions template</returns>
        </member>
        <member name="P:AskiaCore.ISurvey.Version">
            <summary>
            Gets the version of the engine that created the survey
            </summary>
        </member>
        <member name="M:AskiaCore.ISurvey.Upgrade">
            <summary>
            Upgrades survey to latest version
            </summary>
        </member>
        <member name="M:AskiaCore.ISurvey.SetDefaultPageTemplate(System.Int32)">
            <summary>
            Set the default pages template id for the whole survey
            </summary>
            <param name="id">Valid page template id</param>
            <returns>Return the result of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SetDefaultLanguage(System.Int32)">
            <summary>
            Set the default language ID for the whole survey
            </summary>
            <param name="languageId">Valid language ID</param>
            <returns>Return the result of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.InsertFromQuestionsTemplate(AskiaCore.IQuestionsTemplate,System.Collections.Generic.IEnumerable{AskiaCore.IDynamicSetting},System.Int32,System.Int32)">
            <summary>
            Insert questions from a given template to a specific destination
            </summary>
            <param name="template">Template from which questions will be crafted</param>
            <param name="settings">Dictionary of settings (values) for the properties of the question.</param>
            <param name="targetParentId">Id of the parent target question</param>
            <param name="targetPosition">Position at which the questions will be moved as the parent target child</param>
            <returns>Return the result of the insertion</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.MoveQuestions(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Move questions to a given destination
            </summary>
            <remarks>
            TODO Movement rules
            </remarks>
            <param name="questionIds">Ids of questions to move</param>
            <param name="targetParentId">Id of the parent target question</param>
            <param name="targetPosition">Position at which the questions will be moved as the parent target child</param>
            <returns>Return the result of the movement</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.IndentQuestions(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Indent questions
            </summary>
            <remarks>
            TODO Indent rules
            </remarks>
            <param name="questionIds">Ids of questions to indent</param>
            <returns>Return the result of the indent</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.UnindentQuestions(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Unindent questions
            </summary>
            <remarks>
            TODO Indent rules
            </remarks>
            <param name="questionIds">Ids of questions to unindent</param>
            <returns>Return the result of the unindent</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.MergeQuestionPages(System.Int32,System.Int32)">
            <summary>
            Merge questions from the given id's range into the same page
            </summary>
            <remarks>
            TODO Merge rules
            </remarks>
            <param name="firstQuestionId">First id of the question range to merge</param>
            <param name="lastQuestionId">Last id of the question range to merge</param>
            <returns>Return the result of the merge</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SplitQuestionPages(System.Int32,System.Int32)">
            <summary>
            Split merged questions from the given id's range
            </summary>
            <remarks>
            TODO Split rules
            </remarks>
            <param name="firstQuestionId">First id of the question range to split</param>
            <param name="lastQuestionId">Last id of the question range to split</param>
            <returns>Return the result of the split</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.MoveElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            Move element to a given destination
            </summary>
            <remarks>
            TODO Movement rules
            </remarks>
            <param name="elementId">Id of the element to move</param>
            <param name="targetParentId">Id of the parent target element</param>
            <param name="targetPosition">Position at which the element will be moved as the parent target child</param>
            <returns>Return the result of the movement</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.MoveRoutings(System.Collections.Generic.IEnumerable{System.Int32},AskiaCore.RoutingStartType,System.Int32,System.Int32)">
            <summary>
            Move routings to a given destination
            </summary>
            <remarks>
            TODO Movement rules
            </remarks>
            <param name="routingIds">Ids of routings to move</param>
            <param name="routingStartType">How the routing is triggered, e.g. by a question, by the start of an interview.</param>
            <param name="startQuestionId">Id of the new start question.</param>
            <param name="targetPosition">Position at which the routings will be moved within the start question</param>
            <returns>Return the result of the movement</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SaveAll">
            <summary>
            Saves all the survey recursively
            </summary>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SaveToExchangeFormat(System.String)">
            <summary>
            Saves to file in exchange format (.qex)
            </summary>
            <param name="path">Path where the qex file will be stored</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SaveToExchangeFormat(System.String,System.String)">
            <summary>
            Saves to file in exchange format (.qex)
            </summary>
            <param name="path">Path where the qex file will be stored</param>
            <param name="resourcePath">Indicate where the resources will be extracted</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SaveToExchangeFormat(System.Byte[]@)">
            <summary>
            Saves to memory in exchange format
            </summary>
            <param name="data">Byte array in which the qex data will be stored</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.ReadFromExchangeFormat(System.String)">
            <summary>
            Reads from file in exchange format (.qex)
            </summary>
            <param name="path">Path where the qex file is located</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.ReadFromExchangeFormat(System.String,System.String)">
            <summary>
            Reads from file in exchange format (.qex)
            </summary>
            <param name="path">Path where the qex file is located</param>
            <param name="resourcePath">Path where the resources will be extracted</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.ReadFromExchangeFormat(System.Byte[])">
            <summary>
            Reads from file in exchange format (.qex)
            </summary>
            <param name="data">Byte array from which the qex data will be read</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SaveToXMLFile(System.String)">
            <summary>
            Saves to file in XML format
            </summary>
            <param name="path">Path where the XML file will be stored</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.SaveToXML(System.String@)">
            <summary>
            Saves to memory in XML format
            </summary>
            <param name="data">String in which the XML data will be saved</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.LoadFromXMLFile(System.String)">
            <summary>
            Reads from file in XML format
            </summary>
            <param name="path">Path where the XML file is located</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.LoadFromXML(System.String)">
            <summary>
            Reads from memory in XML format
            </summary>
            <param name="data">String from which the XML data will be read</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CheckQuestionsStructure(System.Collections.Generic.ICollection{AskiaCore.ISurveyIntegrityError}@)">
            <summary>
            Checks the integrity of the questions structure
            </summary>
            <param name="errors">Collection of questions structure errors filled by this operation</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CheckRoutings(System.Collections.Generic.ICollection{AskiaCore.ISurveyIntegrityError}@)">
            <summary>
            Checks the routings
            </summary>
            <param name="errors">Collection of routings errors filled by this operation</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CheckElementsStructure(System.Collections.Generic.ICollection{AskiaCore.ISurveyIntegrityError}@)">
            <summary>
            Checks the integrity of the elements structure
            </summary>
            <param name="errors">Collection of elements structure errors filled by this operation</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CheckAll(System.Collections.Generic.ICollection{AskiaCore.ISurveyIntegrityError}@)">
            <summary>
            Checks all the survey
            </summary>
            <remarks>
            Basically calls all other check functions.
            </remarks>
            <param name="errors">Collection of errors filled by this operation</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.RunScript(System.String)">
            <summary>
            Runs an Askia script
            </summary>
            <param name="script">The Askia script to run</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.ExtractResources">
            <summary>
            Extract resources to their appropriate location <see cref = "P:AskiaCore.Persistent.ResourcesPath" />
            </summary>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CheckResourceFileLocationAlreadyExist(System.String)">
            <summary>
            Checks if the given resource file location already exist
            </summary>
            <param name="resourceFileLocation">Name of resource file location to check</param>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.ApplyTheme(AskiaCore.ITheme)">
            <summary>
            Applies the given theme
            </summary>
            <param name="theme">Theme to apply</param>
        </member>
        <member name="M:AskiaCore.ISurvey.ResetResourcePath">
            <summary>
            Empties the Live and test path so it works in a published survey
            </summary>
        </member>
        <member name="M:AskiaCore.ISurvey.TestCode">
            <summary>
            Internal debug function
            </summary>
            <remarks>
            <b>Do not use.</b>
            </remarks>
            <returns>Return a boolean representing the success of the operation</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CreateInterview">
            <summary>
            Creates an interview from this survey
            </summary>
            <returns>Return the newly created interview</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CreateInterview(System.Int32)">
            <summary>
            Creates an interview from this survey
            </summary>
            <param name="seed">Seed of the new interview</param>
            <returns>Return the newly created interview</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.LoadInterview(System.Int32)">
            <summary>
            Loads a specific interview
            </summary>
            <param name="seed">Seed of the interview to load</param>
            <returns>Return the loaded interview</returns>
        </member>
        <member name="P:AskiaCore.ISurvey.Languages">
            <summary>
            Collection of languages for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.Scenarios">
            <summary>
            Collection of scenarios for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.Categories">
            <summary>
            Collection of categories for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.Resources">
            <summary>
            Collection of resources for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.Questions">
            <summary>
            Collection of questions for this survey
            </summary>
        </member>
        <member name="M:AskiaCore.ISurvey.FindResponse(System.Int32)">
            <summary>
            Retrieve a response from within the questions of the
            survey given its id
            </summary>
            <param name="responseId">Id of the response to find</param>
            <returns>Return the found response</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.FindResponses(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Retrieve responses from within the questions of the
            survey given their ids
            </summary>
            <param name="responsesIds">Ids of the responses to find</param>
            <returns>Return the found responses</returns>
        </member>
        <member name="P:AskiaCore.ISurvey.Routings">
            <summary>
            Collection of routings for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.Elements">
            <summary>
            Collection of elements for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.Controls">
            <summary>
            Collection of controls for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.PageTemplates">
            <summary>
            Collection of page templates for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.DefaultControls">
            <summary>
            Collection of default controls for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.DefaultPageTemplateProperties">
            <summary>
            Collection of default page template properties for this survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurvey.ThemeProperties">
            <summary>
            Collection of theme properties for this survey
            </summary>
        </member>
        <member name="M:AskiaCore.ISurvey.GetMessages">
            <summary>
            Returns a collection of the messages for the
            current language
            </summary>
            <remarks>
            This operation returns all different kind of the messages used by the system for this survey
            </remarks>
            <returns>Return a dictionary mapping a message type to its value in the current survey language</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CompileScript(AskiaCore.RoutingConditionType,System.String)">
            <summary>
            Compiles an Askia script.
            </summary>
            <remarks>
            Used to test whether a script is valid for the current survey.
            </remarks>
            <param name="routingConditionType">The type of the routing the script would apply to.</param>
            <param name="script">Script to be compiled.</param>
            <returns>Return the result of the script compilation.</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CompileScript(AskiaCore.RoutingActionType,System.String)">
            <summary>
            Compiles an Askia script.
            </summary>
            <remarks>
            Used to test whether a script is valid for the current survey.
            </remarks>
            <param name="routingActionType">The type of the routing action the script would apply to.</param>
            <param name="script">Script to be compiled.</param>
            <returns>Return the result of the script compilation.</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CreateConditionFromScript(System.String)">
            <summary>
            Creates an assisted condition given a script.
            </summary>
            <param name="script"></param>
            <returns>Returns the newly created condition</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CreateScriptFromCondition(System.String)">
            <summary>
            Creates a script given an assisted condition.
            </summary>
            <param name="condition"></param>
            <returns>Returns the newly created script</returns>
        </member>
        <member name="M:AskiaCore.ISurvey.CreateSubSurveyForScreen(AskiaCore.IElement)">
            <summary>
            Creates a sub-survey for the variables in the page element.
            </summary>
            <param name="page">The page element to base the survey on.</param>
            <returns>The sub-survey with only the variables of the supplied page element.</returns>
        </member>
        <member name="T:AskiaCore.ImplementationAssembly">
            <summary>
                This class is used to dynamically instantiate and call the methods on the internal AskiaCore implementation assembly.
                It takes care of the 32/64bit environment
            </summary>
        </member>
        <member name="M:AskiaCore.ImplementationAssembly.GetType(System.String)">
            <summary>
            Return the Type specified in the given string from the correct AskiaCoreInternal dll (32 bits or 64 bits).
            </summary>
            <param name="type">Type to obtain as string</param>
            <returns>Return the type object from the specified string or null</returns>
        </member>
        <member name="M:AskiaCore.ImplementationAssembly.CreateObject(System.String,System.Object[])">
            <summary>
            Dynamically create an object from the specified class with the specified constructor parameters
            </summary>
            <param name="className">Name of the class object to instantiate</param>
            <param name="constructorParameters">List of parameters to instantiate the class</param>
            <returns>Return the instance of the class or null</returns>
        </member>
        <member name="M:AskiaCore.ImplementationAssembly.CreateObject``1(System.String,System.Object[])">
            <summary>
            Dynamically create an object from the specified class with the specified constructor parameters
            </summary>
            <param name="className">Name of the class object to instantiate</param>
            <param name="constructorParameters">List of parameters to instantiate the class</param>
            <returns>Return the instance of the class or null</returns>
        </member>
        <member name="M:AskiaCore.ImplementationAssembly.InvokeStaticMethod``1(System.String,System.String,System.Object[])">
            <summary>
            Dynamically invoke a specified static method of the specified class with the specified  parameters
            </summary>
            <param name="className">Name of the class object to use</param>
            <param name="methodName">Name of the method to invoke</param>
            <param name="parameters">List of parameters to invoke the static method</param>
            <returns>Return the instance of the class or null</returns>
        </member>
        <member name="T:AskiaCore.ISurveyInformation">
            <summary>
            Contains basic information about a survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyInformation.PortalId">
            <summary>
            Id of the survey in AskiaPortal database
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyInformation.Name">
            <summary>
            Name of the survey
            </summary>
        </member>
        <member name="M:AskiaCore.ISurveyInformation.SetName(System.String)">
            <summary>
            Sets the name of the survey
            </summary>
            <param name="name">Valid survey name</param>
            <returns>Return the result of the operation</returns>
        </member>
        <member name="P:AskiaCore.ISurveyInformation.Description">
            <summary>
            Description of the survey
            </summary>
        </member>
        <member name="P:AskiaCore.ISurveyInformation.DefaultLanguageId">
            <summary>
            Id of the survey default Language
            </summary>
            <value>If not specified the default language will be English (2057)</value>
        </member>
        <member name="P:AskiaCore.ISurveyInformation.DefaultPageTemplateId">
            <summary>
            Returns the id of the survey default page template
            </summary>
        </member>
        <member name="T:AskiaCore.ISurveyTemplate">
            <summary>
            Survey template interface
            </summary>
        </member>
        <member name="M:AskiaCore.ISurveyTemplate.GenerateSurvey">
            <summary>
            Generates a survey from this template without using dynamic settings
            </summary>
            <returns>Return the newly generated survey</returns>
        </member>
        <member name="M:AskiaCore.ISurveyTemplate.GenerateSurveyDynamicaly(System.Collections.Generic.IEnumerable{AskiaCore.IDynamicSetting})">
            <summary>
            Generates a survey from this template using dynamic settings
            </summary>
            <param name="settings">Collection of settings used to generate the survey</param>
            <returns>Return the newly generated survey</returns>
        </member>
        <member name="T:AskiaCore.IThemeProperty">
            <summary>
            Represents the key/value pair Theme property
            </summary>
        </member>
        <member name="P:AskiaCore.IThemeProperty.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:AskiaCore.IThemeProperty.Value">
            <summary>
            Value assign to the property
            </summary>
        </member>
        <member name="P:AskiaCore.IThemeProperty.IsInherited">
            <summary>
            Tells if the property is inherited or set at the current level
            </summary>
        </member>
        <member name="T:AskiaCore.IThemePropertyCollection">
            <summary>
            Collection of the Theme property
            </summary>
        </member>
        <member name="P:AskiaCore.IThemePropertyCollection.Count">
            <summary>
            Number of properties in the collection
            </summary>
        </member>
        <member name="P:AskiaCore.IThemePropertyCollection.Item(System.String)">
            <summary>
            Value associated with the specified property name
            </summary>
            <param name="name">Name of the property to read</param>
        </member>
        <member name="M:AskiaCore.IThemePropertyCollection.Contains(System.String)">
            <summary>
            Indicates if the collection contains the specified property
            </summary>
            <param name="name">Name of the property to search</param>
            <returns>True when the collection contains the specified property, otherwise false</returns>
        </member>
        <member name="M:AskiaCore.IThemePropertyCollection.Create(System.String,System.String)">
            <summary>
            Create a property using the specified name and value
            </summary>
            <remarks>
            If the name of the property already exist, this method override it's value
            </remarks>
            <param name="name">Name of the property to create</param>
            <param name="value">Value of the new create property</param>
            <returns>The property that has been created</returns>
        </member>
        <member name="M:AskiaCore.IThemePropertyCollection.Remove(System.String)">
            <summary>
            Remove the specified property from the collection
            </summary>
            <param name="name">Name of the property to remove</param>
            <returns>Returns true if the property was found and removed</returns>
        </member>
        <member name="M:AskiaCore.IThemePropertyCollection.Clear">
            <summary>
            Remove all properties from the collection
            </summary>
        </member>
        <member name="M:AskiaCore.IThemePropertyCollection.GetResolvedCascadingValues">
            <summary>
            Get all properties including the ones resolving to default values
            </summary>
            <returns>Returns a collection of theme properties</returns>
        </member>
        <member name="T:AskiaCore.IThemePropertyIterator">
            <summary>
            Theme properties collection iterator
            </summary>
        </member>
        <member name="T:AskiaCore.ITheme">
            <summary>
            Theme Interface
            </summary>
        </member>
        <member name="P:AskiaCore.ITheme.Name">
            <summary>
            Name of the theme
            </summary>
        </member>
        <member name="P:AskiaCore.ITheme.Description">
            <summary>
            Description of the theme
            </summary>
        </member>
        <member name="P:AskiaCore.ITheme.Properties">
            <summary>
            Collection of the theme properties
            </summary>
        </member>
        <member name="T:AskiaCore.ThemesFactory">
            <summary>
            Themes factory
            </summary>
        </member>
        <member name="M:AskiaCore.ThemesFactory.GetThemesMap(AskiaCore.IContext)">
            <summary>
            Retrieves all the available themes
            </summary>
            <param name="ctx">Context used by the theme</param>
            <returns>Returns a dictionary of all themes mapped by their id</returns>
        </member>
        <member name="M:AskiaCore.ThemesFactory.Create(AskiaCore.IContext)">
            <summary>
            Creates a new theme
            </summary>
            <param name="ctx">Context used by the theme</param>
            <returns>Returns the newly created theme</returns>
        </member>
        <member name="M:AskiaCore.ThemesFactory.Get(AskiaCore.IContext,System.Int32)">
            <summary>
            Retrieves a theme given its id
            </summary>
            <param name="context">Context used by the theme</param>
            <param name="id">Id of the theme to retrieve</param>
            <returns>Returns the found theme</returns>
        </member>
        <member name="M:AskiaCore.ThemesFactory.ClearCache">
            <summary>
            Clears the cached themes so they can be reloaded on the next call to <see cref="M:AskiaCore.ThemesFactory.ClearCache"/>
            </summary>
        </member>
        <member name="T:AskiaCore.DatabaseTypes">
            <summary>
            Enumeration of the database types
            </summary>
        </member>
        <member name="F:AskiaCore.DatabaseTypes.NONE">
            <summary>
            Do not use any database
            </summary>
        </member>
        <member name="F:AskiaCore.DatabaseTypes.DAO">
            <summary>
            Use DAO access database
            </summary>
        </member>
        <member name="F:AskiaCore.DatabaseTypes.ODBC">
            <summary>
             Use ODBC access database
            </summary>
        </member>
        <member name="F:AskiaCore.DatabaseTypes.ADO">
            <summary>
             Use ADO access database
            </summary>
        </member>
        <member name="F:AskiaCore.DatabaseTypes.PORTAL">
            <summary>
            Use AskiaPortal database
            </summary>
        </member>
        <member name="T:AskiaCore.Persistent">
            <summary>
            Helper methods to store persistent environment data.<br/>
            It is important to note that persistent data is only kept in memory despite the name,
            restarting a process using AskiaCore would clear this data.
            </summary>
            <remarks>
            For .NET web project you may use the Global.asax to initialise the persistent settings
            </remarks>
            <example>
                <para>Management of the database connection in the Global.asax of the .NET web project</para>
                <code>
                    using AskiaCore;
            
                    namespace MyApp
                    {
                        public class Global : HttpApplication
                        {
                            protected void Application_Start(object sender, EventArgs e)
                            {
                                // Initialize the database connection string (Where the survey was stored)
                                Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
                                // Initialize the /Resources folder Path and URL
                                Persistent.ResourcesPath = "C:\\Inetpub\\wwwroot\\MyApp\\Resources\\";
                                Persistent.ResourcesUrl = "/Resources/";
                            }
            
                            protected void Application_End(object sender, EventArgs e)
                            {
                                // Release the database connection
                                Persistent.EndDatabaseConnection();
                            }
                        }
                    }
                </code>
            </example>
        </member>
        <member name="P:AskiaCore.Persistent.ResourcesPath">
            <summary>
            Full physical path to the /Resources directory, where resources will be stored during interviews.
            </summary>
        </member>
        <member name="P:AskiaCore.Persistent.ResourcesUrl">
            <summary>
            URL (relative) to the /Resources directory, used in web pages during interviews.
            </summary>
        </member>
        <member name="P:AskiaCore.Persistent.InterviewsPath">
            <summary>
            Full physical path to the /Interviews directory, where temporary interviews are persisted.
            </summary>
        </member>
        <member name="M:AskiaCore.Persistent.InitDatabaseConnection(System.String,AskiaCore.DatabaseTypes)">
            <summary>
             Initializes the connection of the main database used by AskiaCore
            </summary>
            <remarks>
            For .NET web project you may use the Global.asax to initialise the database connection
            </remarks>
            <example>
                <para>Initialise the database connection in the Global.asax of the .NET web project</para>
                <code>
                    using AskiaCore;
            
                    namespace MyApp
                    {
                        public class Global : HttpApplication
                        {
                            protected void Application_Start(object sender, EventArgs e)
                            {
                                // Initialize the database connection string (Where the survey was stored)
                                Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
                            }
                        }
                    }
                </code>
            </example>
            <param name="accessString">Connection string or path for the database, depending on the database type</param>
            <param name="type">Type of the database to use</param>
        </member>
        <member name="M:AskiaCore.Persistent.EndDatabaseConnection">
            <summary>
            Closes the connection of the main database used by AskiaCore
            </summary>
            <remarks>
            For .NET web project you may use the Global.asax to release the database connection
            </remarks>
            <example>
                <para>Release the database connection in the Global.asax of the .NET web project</para>
                <code>
                    using AskiaCore;
            
                    namespace MyApp
                    {
                        public class Global : HttpApplication
                        {
                            protected void Application_End(object sender, EventArgs e)
                            {
                                // Release the database connection
                                Persistent.EndDatabaseConnection();
                            }
                        }
                    }
                </code>
            </example>
        </member>
        <member name="M:AskiaCore.Persistent.InitWebProdDatabaseConnection(System.String)">
            <summary>
            Initializes the connection to the <i>webprod</i> database
            </summary>
            <remarks>
            For .NET web project you may use the Global.asax to initialise the database connection
            </remarks>
            <example>
                <para>Initialise the database connection in the Global.asax of the .NET web project</para>
                <code>
                    using AskiaCore;
            
                    namespace MyApp
                    {
                        public class Global : HttpApplication
                        {
                            protected void Application_Start(object sender, EventArgs e)
                            {
                                // Initialize the database connection string
                                Persistent.InitWebProdDatabaseConnection("connectionstring");
                            }
                        }
                    }
                </code>
            </example>
            <param name="accessString">Connection string or path for the database access, depending on the database type</param>
        </member>
        <member name="M:AskiaCore.Persistent.EndWebProdDatabaseConnection">
            <summary>
            Closes the <i>webprod</i> database connection
            </summary>
            <remarks>
            For .NET web project you may use the Global.asax to release the database connection
            </remarks>
            <example>
                <para>Release the database connection in the Global.asax of the .NET web project</para>
                <code>
                    using AskiaCore;
            
                    namespace MyApp
                    {
                        public class Global : HttpApplication
                        {
                            protected void Application_End(object sender, EventArgs e)
                            {
                                // Release the database connection
                                Persistent.EndWebProdDatabaseConnection();
                            }
                        }
                    }
                </code>
            </example>
        </member>
        <member name="T:AskiaCore.SurveyFactory">
            <summary>
            Factory to create an instance of <see cref="T:AskiaCore.ISurvey"/> using the specified context
            </summary>
        </member>
        <member name="M:AskiaCore.SurveyFactory.Create(AskiaCore.IContext)">
             <summary>
             Create a new blank survey
             </summary>
             <example>
                 <para>Create a new survey</para>
                 <code>
                     using AskiaCore;
             
                     namespace MyApp
                     {
                         public class MyProgram
                         {
                             static void Main()
                             {
                                 // Initialize the database connection string (Where the survey will be stored)
                                 Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
            
                                 // Create a new context
                                 IContext context = ContextFactory.Create();
                                 context.UserId = 1;
                                 context.SessionId = "xxxxx-xxxxx-xxxxx-xxxxxx";
                                 context.LanguageId = 2057; // Edit the survey with this language (English)
                               
                                 // Create a new survey
                                 ISurvey survey = SurveyFactory.Create(context);
                                 survey.Name = "MySurvey";
                                 survey.DefaultLanguageId = 2057; // English
                               
                                 // ... Rest of the code to create questions
                         
                                 // Save all changes
                                 survey.SaveAll();
                         
                                 // Release the database connection
                                 Persistent.EndDatabaseConnection();
                             }
                         }
                     }
                 </code>
             </example>
             <param name="context">Context used to create the survey</param>
             <returns>Return the newly created survey</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.CreateSurveyTemplate(AskiaCore.IContext)">
            <summary>
            Create a new blank survey template
            </summary>
            <param name="context">Context used to create the survey template</param>
            <returns>Return the newly created survey template</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.CreateQuestionsTemplate(AskiaCore.IContext)">
            <summary>
            Create a new blank questions template
            </summary>
            <param name="context">Context used to create the questions template</param>
            <returns>Return the newly created questions template</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.Get(AskiaCore.IContext,System.Int32)">
             <summary>
             Get an instance of an existing survey
             </summary>
             <example>
                 <para>Retrieves a specific survey and display its name</para>
                 <code>
                     using AskiaCore;
             
                     namespace MyApp
                     {
                         public class MyProgram
                         {
                             static void Main()
                             {
                                 // Initialize the database connection string (Where the survey was stored)
                                 Persistent.InitDatabaseConnection("connectionstring", DatabaseTypes.PORTAL);
            
                                 // Create a new context
                                 IContext context = ContextFactory.Create();
                                 context.UserId = 1;
                                 context.SessionId = "xxxxx-xxxxx-xxxxx-xxxxxx";
                                 context.LanguageId = 2057; // Edit the survey with this language (English)
                               
                                 // Get the survey with the AskiaPortal Id = 1
                                 ISurvey survey = SurveyFactory.Get(context, 1);
                                 if (survey == null)
                                 {
                                     Console.WriteLine("[ERROR] Could not find the survey with the AskiaPortal id 1");
                                 }
                                 else
                                 {
                                     Console.WriteLine("The name of the survey 1 is `{0}`", survey.Name);
                                 }
                         
                                 // Release the database connection
                                 Persistent.EndDatabaseConnection();
                             }
                         }
                     }
                 </code>
             </example>
             <remarks>
             This method can retrieves both surveys and survey templates.
             </remarks>
             <param name="context">Context used to access the survey</param>
             <param name="id">Id of the survey to access</param>
             <returns>Return the instance of survey or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurvey(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing survey given its id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Id of the survey to access</param>
            <returns>Return the instance of survey or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveyByPortalId(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing survey given its Portal id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Portal id of the survey to access</param>
            <returns>Return the instance of survey or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.CheckSurveyExist(AskiaCore.IContext,System.Int32)">
            <summary>
            Check if a survey exists given its id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Id of the survey to access</param>
            <returns>Return the boolean indicating if the survey exists</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.CheckSurveysExist(AskiaCore.IContext,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Check if a collection of surveys exist given their ids
            </summary>
            <param name="context">Context used to access the surveys</param>
            <param name="ids">Collection of ids of the surveys to access</param>
            <returns>Return a dictionary mapped by survey id, indicating if each survey exists</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.CheckSurveyExistByPortalId(AskiaCore.IContext,System.Int32)">
            <summary>
            Check if a survey exists given its Portal id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Portal id of the survey to access</param>
            <returns>Return the boolean indicating if the survey exists</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.CheckSurveysExistByPortalId(AskiaCore.IContext,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Check if a collection of surveys exist given their Portal ids
            </summary>
            <param name="context">Context used to access the surveys</param>
            <param name="ids">Collection of Portal ids of the surveys to access</param>
            <returns>Return a dictionary mapped by survey Portal id, indicating if each survey exists</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveyInformation(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing SurveyInformation given its id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Id of the survey to access</param>
            <returns>Return the instance of SurveyInformation or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveysInformation(AskiaCore.IContext,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get instances of SurveyInformations given their ids
            </summary>
            <param name="context">Context used to access the surveys</param>
            <param name="ids">Collection of ids of the surveys to access</param>
            <returns>Return a dictionary of SurveyInformations mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetAllSurveysInformation(AskiaCore.IContext)">
            <summary>
            Get all instances of SurveyInformations
            </summary>
            <param name="context">Context used to access the surveys</param>
            <returns>Return a dictionary of SurveyInformations mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveyInformationByPortalId(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing SurveyInformation given its Portal id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Portal id of the survey to access</param>
            <returns>Return the instance of SurveyInformation or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveysInformationByPortalId(AskiaCore.IContext,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get instances of SurveyInformations given their Portal ids
            </summary>
            <param name="context">Context used to access the surveys</param>
            <param name="ids">Collection of Portal ids of the surveys to access</param>
            <returns>Return a dictionary of SurveyInformations mapped by survey Portal id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetAllSurveysInformationWithPortalId(AskiaCore.IContext)">
            <summary>
            Get all instances of SurveyInformations
            </summary>
            <param name="context">Context used to access the surveys</param>
            <returns>Return a dictionary of SurveyInformations mapped by survey Portal id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveyTemplate(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing survey template given its id
            </summary>
            <param name="context">Context used to access the survey template</param>
            <param name="id">Id of the survey template to access</param>
            <returns>Return the instance of survey template or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveyTemplateInformation(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing survey template SurveyInformation given its id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Id of the survey to access</param>
            <returns>Return the instance of survey template SurveyInformation or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveyTemplatesInformation(AskiaCore.IContext,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get instances of survey template SurveyInformations given their ids
            </summary>
            <param name="context">Context used to access the surveys</param>
            <param name="ids">Collection of ids of the surveys to access</param>
            <returns>Return a dictionary of survey template SurveyInformations mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetAllSurveyTemplatesInformation(AskiaCore.IContext)">
            <summary>
            Get all instances of survey template SurveyInformations
            </summary>
            <param name="context">Context used to access the surveys</param>
            <returns>Return a dictionary of survey template SurveyInformations mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetQuestionsTemplate(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing questions template given its id
            </summary>
            <param name="context">Context used to access the questions template</param>
            <param name="id">Id of the questions template to access</param>
            <returns>Return the instance of questions template or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetQuestionsTemplateInformation(AskiaCore.IContext,System.Int32)">
            <summary>
            Get an instance of an existing questions template SurveyInformation given its id
            </summary>
            <param name="context">Context used to access the survey</param>
            <param name="id">Id of the survey to access</param>
            <returns>Return the instance of questions template SurveyInformation or null if not found</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetQuestionsTemplatesInformation(AskiaCore.IContext,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get instances of questions template SurveyInformations given their ids
            </summary>
            <param name="context">Context used to access the surveys</param>
            <param name="ids">Collection of ids of the surveys to access</param>
            <returns>Return a dictionary of questions template SurveyInformations mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetAllQuestionsTemplatesInformation(AskiaCore.IContext)">
            <summary>
            Get all instances of questions template SurveyInformations
            </summary>
            <param name="context">Context used to access the surveys</param>
            <returns>Return a dictionary of questions template SurveyInformations mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetSurveyTemplatesMap(AskiaCore.IContext)">
            <summary>
            Get all instances of SurveyTemplates
            </summary>
            <param name="ctx">Context used to access the surveys</param>
            <returns>Return a dictionary of SurveyTemplates mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.GetQuestionsTemplatesMap(AskiaCore.IContext)">
            <summary>
            Get all instances of QuestionsTemplates
            </summary>
            <param name="ctx">Context used to access the surveys</param>
            <returns>Return a dictionary of QuestionsTemplates mapped by survey id</returns>
        </member>
        <member name="M:AskiaCore.SurveyFactory.ClearCache">
            <summary>
            Clears the cached surveys
            </summary>
        </member>
    </members>
</doc>
